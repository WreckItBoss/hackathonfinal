{"version":3,"sources":["Garden/FlowersIMGFile/Tulip/Blooming.png","Garden/FlowersIMGFile/Tulip/Half-blooming.png","Garden/FlowersIMGFile/Tulip/Withered.png","SignIn/signup-back.jpg","FlowerShop/flower_shop.jpg","Garden/garden_back.jpg","Bouquet/bouquet.jpg","Bouquet/bouquetflowers/Red/redbouquet1.PNG","Bouquet/bouquetflowers/Red/redbouquet2.PNG","Bouquet/bouquetflowers/Red/redbouquet3.PNG","Bouquet/bouquetflowers/White/whitebouquet1.PNG","Bouquet/bouquetflowers/White/whitebouquet2.PNG","Bouquet/bouquetflowers/White/whitebouquet3.PNG","Bouquet/bouquetflowers/Yellow/yellowbouquet1.PNG","Bouquet/bouquetflowers/Yellow/yellowbouquet2.PNG","Bouquet/bouquetflowers/Yellow/yellowbouquet3.PNG","Bouquet/bouquetflowers/Balanced/balancebouquet1.PNG","Bouquet/bouquetflowers/Balanced/balancebouquet3.PNG","Bouquet/bouquetflowers/Balanced/balancebouquet4.PNG","Profile/profile.jpg","SignIn/SignIn.js","DrawerAppBar/DrawerAppBar.js","FlowerShop/FlowerShop.js","Garden/TaskFlower/TaskFlower.js","Garden/Garden.js","Bouquet/Bouquet.js","Profile/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","AppContainer","styled","div","_templateObject","_taggedTemplateLiteral","background","StyledPaper","Paper","_templateObject2","SignIn","open","setOpen","useState","navigate","useNavigate","handleOpen","prevOpen","React","createElement","Button","variant","onClick","sx","bgcolor","color","Modal","onClose","className","onSubmit","event","preventDefault","Typography","TextField","label","type","drawerWidth","navItems","text","link","DrawerAppBar","props","window","mobileOpen","setMobileOpen","handleDrawerToggle","prevState","drawer","Box","textAlign","Divider","List","map","item","ListItem","key","disablePadding","ListItemButton","component","Link","to","ListItemText","primary","container","undefined","document","body","display","CssBaseline","AppBar","Toolbar","xs","sm","mr","IconButton","aria-label","edge","MenuIcon","flexGrow","handleProfileClick","AccountCircle","Drawer","ModalProps","keepMounted","& .MuiDrawer-paper","boxSizing","width","style","position","top","left","transform","border","boxShadow","FlowerShop","title","setTitle","description","setDescription","duetime","setDueTime","taskType","setTaskType","handleClose","backgroundImage","concat","flowerShopBackground","backgroundSize","backgroundPosition","height","Stack","spacing","direction","backgroundColor","aria-labelledby","aria-describedby","id","fullWidth","value","onChange","e","target","mb","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","newValue","renderInput","params","Object","assign","FormControl","InputLabel","Select","labelId","MenuItem","justifyContent","async","axios","post","dueDate","Date","flowerImages","console","log","error","response","data","message","alert","FlowerWrapper","FlowerImage","img","Tooltip","_templateObject3","TaskFlower","_ref","task","index","checkFlowerCondition","refreshTasks","tooltipVisible","setTooltipVisible","src","flowerStatus","Tulip_Blooming","Tulip_Half_Blooming","Tulip_Withered","getFlowerImage","alt","flower","toggleTooltip","toLocaleString","year","month","day","hour","minute","put","_id","completedAt","isCompleted","delete","GardenContainer","Content","Garden","tasks","setTasks","fetchTasks","getAllTasks","filter","useEffect","interval","setInterval","clearInterval","get","createdAt","timeRatio","BouquetContainer","BouquetImage","Bouquet","bouquetInfo","setBouquetInfo","calculateBouquet","studyCount","activityCount","houseworkCount","points","forEach","condition","totalTasks","length","completionRatio","studyRatio","houseworkRatio","activityRatio","majorityType","ratios","ratio","sort","a","b","Math","random","bouquetCondition","fetchCompletedTasks","getBouquetImages","bouquetStatus","redHealthy","redDying","redDead","whiteHealthy","whiteDying","whiteDead","yellowHealthy","yellowDying","yellowDead","balancedHealthy","balancedDying","balancedDead","marginLeft","ProfileContainer","ProfileContent","ProfileField","ProfileName","_templateObject4","ProfileEmail","_templateObject5","Line","_templateObject6","Profile","App","Router","Routes","Route","path","element","Fragment","Navigate","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e9b04646.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Blooming.7037eb81.png\";","module.exports = __webpack_public_path__ + \"static/media/Half-blooming.7f4aab7c.png\";","module.exports = __webpack_public_path__ + \"static/media/Withered.579cf8ea.png\";","module.exports = __webpack_public_path__ + \"static/media/signup-back.9128d8b9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/flower_shop.21593905.jpg\";","module.exports = __webpack_public_path__ + \"static/media/garden_back.800ac21a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bouquet.5d29bd76.jpg\";","module.exports = __webpack_public_path__ + \"static/media/redbouquet1.bb75a8cc.PNG\";","module.exports = __webpack_public_path__ + \"static/media/redbouquet2.ebcdae83.PNG\";","module.exports = __webpack_public_path__ + \"static/media/redbouquet3.24100032.PNG\";","module.exports = __webpack_public_path__ + \"static/media/whitebouquet1.e91254ca.PNG\";","module.exports = __webpack_public_path__ + \"static/media/whitebouquet2.c3a8355c.PNG\";","module.exports = __webpack_public_path__ + \"static/media/whitebouquet3.61554c52.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yellowbouquet1.2aabfd45.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yellowbouquet2.344ef54c.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yellowbouquet3.bb721d22.PNG\";","module.exports = __webpack_public_path__ + \"static/media/balancebouquet1.0711bb0e.PNG\";","module.exports = __webpack_public_path__ + \"static/media/balancebouquet3.344b599a.PNG\";","module.exports = __webpack_public_path__ + \"static/media/balancebouquet4.aa056363.PNG\";","module.exports = __webpack_public_path__ + \"static/media/profile.413c3d40.jpg\";","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Modal, Paper, TextField, Typography } from '@mui/material';\r\nimport background from './signup-back.jpg'; // 新しい背景画像のパス\r\n\r\nconst SignIn = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleOpen = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleSignIn = (event) => {\r\n    event.preventDefault();\r\n    setOpen(false);\r\n    navigate('/garden'); // ログインボタンでガーデン画面に遷移\r\n  };\r\n\r\n  return (\r\n    <AppContainer>\r\n      <Button variant=\"contained\" onClick={handleOpen} sx={{ bgcolor: '#ffffff', color: '#a9a9a9' }}>ログイン画面へ</Button>\r\n      <Modal open={open} onClose={handleOpen}>\r\n        <StyledPaper>\r\n          <form className='form' onSubmit={handleSignIn}>\r\n            <Typography variant={'h5'}>Sign In</Typography>\r\n            <TextField label=\"Email address\" variant=\"standard\" className=\"text\" />\r\n            <TextField label=\"Password\" variant=\"standard\" className=\"text\" type=\"password\" />\r\n            <center><Button type=\"submit\" className=\"login btn\">Sign In</Button></center>\r\n            <center><Button className=\"signup btn\">register</Button></center>\r\n            <center><Button variant=\"outlined\" onClick={handleOpen}>close</Button></center>\r\n          </form>\r\n        </StyledPaper>\r\n      </Modal>\r\n    </AppContainer>\r\n  );\r\n};\r\n\r\nconst AppContainer = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-image: url(${background});\r\n  background-size: cover;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 960px;\r\n  height: 540px;\r\n  .form {\r\n    width: 60%;\r\n    margin: 3rem;\r\n    text-align: center;\r\n  }\r\n  .text {\r\n    width: 100%;\r\n    margin: 1rem 0;\r\n  }\r\n  .btn {\r\n    width: 60%;\r\n    color: white;\r\n    text-align: center;\r\n    margin: 1.5rem 0;\r\n  }\r\n  .login {\r\n    background-color: #66cdaa;\r\n  }\r\n  .signup {\r\n    background-color: #008080;\r\n  }\r\n`;\r\n\r\nexport default SignIn;\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Divider from '@mui/material/Divider';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Button from '@mui/material/Button';\r\nimport AccountCircle from '@mui/icons-material/AccountCircle';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst drawerWidth = 240;\r\nconst navItems = [\r\n  { text: 'flower shop', link: '/flower-shop' },\r\n  { text: 'garden', link: '/garden' },\r\n  { text: 'bouquet', link: '/bouquet' }\r\n];\r\n\r\nfunction DrawerAppBar(props) {\r\n  const { window } = props;\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen((prevState) => !prevState);\r\n  };\r\n\r\n  const handleProfileClick = () => {\r\n    navigate('/profile');\r\n  };\r\n\r\n  const drawer = (\r\n    <Box onClick={handleDrawerToggle} sx={{ textAlign: 'center' }}>\r\n      <Divider />\r\n      <List>\r\n        {navItems.map((item) => (\r\n          <ListItem key={item.text} disablePadding>\r\n            <ListItemButton component={Link} to={item.link} sx={{ textAlign: 'center' }}>\r\n              <ListItemText primary={item.text} />\r\n            </ListItemButton>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar component=\"nav\" sx={{ bgcolor: '#ffffff' }}> {/* AppBarの色を設定 */}\r\n        <Toolbar>\r\n          <Box sx={{ display: { xs: 'none', sm: 'block' }, mr: 2 }}>\r\n            {navItems.map((item) => (\r\n              <Button key={item.text} component={Link} to={item.link} sx={{ color: '#a9a9a9' }}>\r\n                {item.text}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            sx={{ mr: 2, display: { sm: 'none' }, color: '#a9a9a9' }} // メニューアイコンの色を設定\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Box sx={{ flexGrow: 1 }} />\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"account\"\r\n            edge=\"end\"\r\n            onClick={handleProfileClick} // プロフィール画面に遷移\r\n            sx={{ color: '#a9a9a9' }} // アカウントアイコンの色を設定\r\n          >\r\n            <AccountCircle />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav>\r\n        <Drawer\r\n          container={container}\r\n          variant=\"temporary\"\r\n          open={mobileOpen}\r\n          onClose={handleDrawerToggle}\r\n          ModalProps={{\r\n            keepMounted: true, // Better open performance on mobile.\r\n          }}\r\n          sx={{\r\n            display: { xs: 'block', sm: 'none' },\r\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n          }}\r\n        >\r\n          {drawer}\r\n        </Drawer>\r\n      </nav>\r\n      <Box component=\"main\" sx={{ p: 3 }}>\r\n        <Toolbar />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nDrawerAppBar.propTypes = {\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default DrawerAppBar;\r\n","\r\n// import React, { useState } from 'react';\r\n// import { Button, Stack, Modal, Box, TextField, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\n// import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\n// import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\n// import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\n// import axios from 'axios';\r\n// import flowerShopBackground from './flower_shop.jpg';\r\n\r\n// const style = {\r\n//   position: 'absolute',\r\n//   top: '50%',\r\n//   left: '50%',\r\n//   transform: 'translate(-50%, -50%)',\r\n//   width: 400,\r\n//   bgcolor: 'background.paper',\r\n//   border: '2px solid #000',\r\n//   boxShadow: 24,\r\n//   p: 4,\r\n// };\r\n\r\n// function FlowerShop() {\r\n//   const [open, setOpen] = useState(false);\r\n//   const [flower, setFlower] = useState('');\r\n//   const [color, setColor] = useState('');\r\n//   const [title, setTitle] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n//   const [duetime, setDueTime] = useState(null);\r\n\r\n//   const handleOpen = () => setOpen(true);\r\n//   const handleClose = () => setOpen(false);\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!title || !description || !duetime || !flower || !color) {\r\n//       alert('You have missing input');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       await axios.post('/api/v1/task', {\r\n//         title,\r\n//         description,\r\n//         dueDate: new Date(duetime),\r\n//         flower,\r\n//         color,\r\n//         flowerImages: 'tulip',\r\n//       });\r\n//       console.log('タスクを作成しました');\r\n//       handleClose();\r\n//     } catch (error) {\r\n//       console.error('Error creating task:', error);\r\n//       if (error.response && error.response.data.message === 'Please complete the tasks you currently have before adding a new one.') {\r\n//         alert('You already have 8 tasks. Let\\'s complete one before adding more');\r\n//       } else {\r\n//         alert('タスクの作成に失敗しました');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ \r\n//       backgroundImage: `url(${flowerShopBackground})`, \r\n//       backgroundSize: 'cover', \r\n//       backgroundPosition: 'center', \r\n//       height: '100vh', \r\n//       position: 'relative' \r\n//     }}>\r\n//       <Stack spacing={2} direction=\"row\" sx={{ position: 'absolute', top: '65%', left: '67%', transform: 'translate(-50%, -50%)' }}>\r\n//         <Button variant=\"contained\" onClick={handleOpen} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスクを作成</Button>      \r\n//       </Stack>\r\n//       <Modal\r\n//         open={open}\r\n//         onClose={handleClose}\r\n//         aria-labelledby=\"modal-title\"\r\n//         aria-describedby=\"modal-description\"\r\n//       >\r\n//         <Box sx={style}>\r\n//           <h2 id=\"modal-title\">タスク作成</h2>\r\n//           <TextField \r\n//             fullWidth \r\n//             label=\"タスク名\" \r\n//             variant=\"standard\" \r\n//             value={title}\r\n//             onChange={(e) => setTitle(e.target.value)}\r\n//             sx={{ mb: 2 }} \r\n//           />\r\n//           <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//             <DateTimePicker\r\n//               label=\"期限\"\r\n//               value={duetime}\r\n//               onChange={(newValue) => setDueTime(newValue)}\r\n//               renderInput={(params) => <TextField {...params} fullWidth sx={{ mb: 2 }} />}\r\n//             />\r\n//           </LocalizationProvider>\r\n//           <TextField \r\n//             fullWidth \r\n//             label=\"コメント\" \r\n//             variant=\"standard\"\r\n//             value={description}\r\n//             onChange={(e) => setDescription(e.target.value)}\r\n//             sx={{ mb: 2 }} \r\n//           />\r\n//           <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n//             <InputLabel id=\"flower-label\">花の名前</InputLabel>\r\n//             <Select\r\n//               labelId=\"flower-label\"\r\n//               id=\"flower-select\"\r\n//               value={flower}\r\n//               onChange={(e) => setFlower(e.target.value)}\r\n//               label=\"花の名前\"\r\n//             >\r\n//               <MenuItem value=\"\">\r\n//                 <em>None</em>\r\n//               </MenuItem>\r\n//               <MenuItem value=\"tulip\">チューリップ</MenuItem>\r\n//               <MenuItem value=\"marguerite\">マーガレット</MenuItem>\r\n//               <MenuItem value=\"rose\">バラ</MenuItem>\r\n//             </Select>\r\n//           </FormControl>\r\n//           <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n//             <InputLabel id=\"color-label\">色</InputLabel>\r\n//             <Select\r\n//               labelId=\"color-label\"\r\n//               id=\"color-select\"\r\n//               value={color}\r\n//               onChange={(e) => setColor(e.target.value)}\r\n//               label=\"色\"\r\n//             >\r\n//               <MenuItem value=\"\">\r\n//                 <em>None</em>\r\n//               </MenuItem>\r\n//               <MenuItem value=\"red\">赤</MenuItem>\r\n//               <MenuItem value=\"blue\">青</MenuItem>\r\n//               <MenuItem value=\"yellow\">黄色</MenuItem>\r\n//             </Select>\r\n//           </FormControl>\r\n//           <Stack spacing={2} direction=\"row\" justifyContent=\"center\">\r\n//             <Button variant=\"contained\" onClick={handleSubmit} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスク作成</Button>        \r\n//           </Stack>\r\n//         </Box>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default FlowerShop;\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Stack, Modal, Box, TextField, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport axios from 'axios';\r\nimport flowerShopBackground from './flower_shop.jpg';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nfunction FlowerShop() {\r\n  const [open, setOpen] = useState(false);\r\n  //const [flower, setFlower] = useState('');\r\n  //const [color, setColor] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [duetime, setDueTime] = useState(null);\r\n  const [taskType, setTaskType] = useState('');\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleSubmit = async () => {\r\n    if (!title || !description || !duetime ||/* !flower || !color ||*/ !taskType) {\r\n      alert('You have missing input');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.post('/api/v1/task', {\r\n        title,\r\n        description,\r\n        dueDate: new Date(duetime),\r\n        //flower,\r\n        //color,\r\n        flowerImages: 'tulip',\r\n        taskType,\r\n      });\r\n      console.log('タスクを作成しました');\r\n      setTitle('');\r\n      setDescription('');\r\n      setDueTime();\r\n      setTaskType('');\r\n\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      if (error.response && error.response.data.message === 'Error') {\r\n        alert('You already have 8 tasks. Let\\'s complete one before adding more');\r\n      } else {\r\n        alert('タスクの作成に失敗しました');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      backgroundImage: `url(${flowerShopBackground})`, \r\n      backgroundSize: 'cover', \r\n      backgroundPosition: 'center', \r\n      height: '100vh', \r\n      position: 'relative' \r\n    }}>\r\n      <Stack spacing={2} direction=\"row\" sx={{ position: 'absolute', top: '65%', left: '67%', transform: 'translate(-50%, -50%)' }}>\r\n        <Button variant=\"contained\" onClick={handleOpen} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスクを作成</Button>      \r\n      </Stack>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-title\"\r\n        aria-describedby=\"modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <h2 id=\"modal-title\">タスク作成</h2>\r\n          <TextField \r\n            fullWidth \r\n            label=\"タスク名\" \r\n            variant=\"standard\" \r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            sx={{ mb: 2 }} \r\n          />\r\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <DateTimePicker\r\n              label=\"期限\"\r\n              value={duetime}\r\n              onChange={(newValue) => setDueTime(newValue)}\r\n              renderInput={(params) => <TextField {...params} fullWidth sx={{ mb: 2 }} />}\r\n            />\r\n          </LocalizationProvider>\r\n          <TextField \r\n            fullWidth \r\n            label=\"コメント\" \r\n            variant=\"standard\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            sx={{ mb: 2 }} \r\n          />\r\n          {/* <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"flower-label\">花の名前</InputLabel>\r\n            <Select\r\n              labelId=\"flower-label\"\r\n              id=\"flower-select\"\r\n              value={flower}\r\n              onChange={(e) => setFlower(e.target.value)}\r\n              label=\"花の名前\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"tulip\">チューリップ</MenuItem>\r\n              <MenuItem value=\"marguerite\">マーガレット</MenuItem>\r\n              <MenuItem value=\"rose\">バラ</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"color-label\">色</InputLabel>\r\n            <Select\r\n              labelId=\"color-label\"\r\n              id=\"color-select\"\r\n              value={color}\r\n              onChange={(e) => setColor(e.target.value)}\r\n              label=\"色\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"red\">赤</MenuItem>\r\n              <MenuItem value=\"blue\">青</MenuItem>\r\n              <MenuItem value=\"yellow\">黄色</MenuItem>\r\n            </Select>\r\n          </FormControl> */}\r\n          <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"taskType-label\">タスクタイプ</InputLabel>\r\n            <Select\r\n              labelId=\"taskType-label\"\r\n              id=\"taskType-select\"\r\n              value={taskType}\r\n              onChange={(e) => setTaskType(e.target.value)}\r\n              label=\"タスクタイプ\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"study\">勉強</MenuItem>\r\n              <MenuItem value=\"housework\">家事</MenuItem>\r\n              <MenuItem value=\"activity\">活動</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <Stack spacing={2} direction=\"row\" justifyContent=\"center\">\r\n            <Button variant=\"contained\" onClick={handleSubmit} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスク作成</Button>        \r\n          </Stack>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FlowerShop;\r\n","\r\nimport React, { useState } from 'react';\r\nimport { Button } from '@mui/material';\r\nimport styled from '@emotion/styled';\r\nimport axios from 'axios';\r\n\r\nimport Tulip_Blooming from '../FlowersIMGFile/Tulip/Blooming.png';\r\nimport Tulip_Half_Blooming from '../FlowersIMGFile/Tulip/Half-blooming.png';\r\nimport Tulip_Withered from '../FlowersIMGFile/Tulip/Withered.png';\r\n\r\nconst TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\r\n  const [tooltipVisible, setTooltipVisible] = useState(false);\r\n\r\n  const toggleTooltip = () => {\r\n    setTooltipVisible(!tooltipVisible);\r\n  };\r\n\r\n  const deleteTask = async () => {\r\n    try {\r\n      await axios.delete(`/api/v1/task/${task._id}`);\r\n      console.log('タスクを削除しました');\r\n      refreshTasks();\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error);\r\n      alert('タスクの削除に失敗しました');\r\n    }\r\n  };\r\n\r\n  const markAsCompleted = async () => {\r\n    try {\r\n      const flowerStatus = checkFlowerCondition(task);\r\n      await axios.put(`/api/v1/task/complete/${task._id}`, {\r\n        flowerStatus,\r\n        taskType: task.taskType,\r\n        completedAt: new Date(),\r\n        isCompleted: true,\r\n      });\r\n      console.log('タスクを完了しました');\r\n      refreshTasks();\r\n    } catch (error) {\r\n      console.error('Error marking task as completed:', error);\r\n      alert('タスクの完了に失敗しました');\r\n    }\r\n  };\r\n\r\n  const getFlowerImage = (flowerStatus) => {\r\n    if (flowerStatus === 'healthy') {\r\n      return Tulip_Blooming;\r\n    } else if (flowerStatus === 'dying') {\r\n      return Tulip_Half_Blooming;\r\n    } else {\r\n      return Tulip_Withered;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FlowerWrapper>\r\n      <FlowerImage\r\n        index={index}\r\n        src={getFlowerImage(checkFlowerCondition(task))}\r\n        alt={task.flower}\r\n        onClick={toggleTooltip}\r\n      />\r\n      {tooltipVisible && (\r\n        <Tooltip>\r\n          <p>タイトル：{task.title}</p>\r\n          <p>内容：{task.description}</p>\r\n          {/* <p>期限：{task.dueDate}</p> */}\r\n          <p>期限：{new Date(task.dueDate).toLocaleString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })}</p>\r\n          <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\r\n          <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\r\n        </Tooltip>\r\n      )}\r\n    </FlowerWrapper>\r\n  );\r\n};\r\n\r\nconst FlowerWrapper = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  margin: 10px;\r\n`;\r\n\r\nconst FlowerImage = styled.img`\r\n  width: 150px;\r\n  height: 150px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Tooltip = styled.div`\r\n  visibility: visible;\r\n  width: 200px;\r\n  background-color: black;\r\n  color: #fff;\r\n  text-align: center;\r\n  border-radius: 6px;\r\n  padding: 5px 0;\r\n  position: absolute;\r\n  z-index: 1;\r\n  bottom: 125%;\r\n  left: 50%;\r\n  margin-left: -100px;\r\n  opacity: 1;\r\n  transition: opacity 0.3s;\r\n`;\r\n\r\nexport default TaskFlower;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport background from './garden_back.jpg';\r\nimport axios from 'axios';\r\nimport TaskFlower from './TaskFlower/TaskFlower';\r\n\r\nimport Tulip_Blooming from './FlowersIMGFile/Tulip/Blooming.png';\r\nimport Tulip_Half_Blooming from './FlowersIMGFile/Tulip/Half-blooming.png';\r\nimport Tulip_Withered from './FlowersIMGFile/Tulip/Withered.png';\r\n\r\nconst Garden = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const fetchTasks = async () => {\r\n    const data = await getAllTasks();\r\n    setTasks(data.filter(task => !task.completedAt)); // Filter out completed tasks\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n    const interval = setInterval(fetchTasks, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const getAllTasks = async () => {\r\n    try {\r\n      const response = await axios.get('/api/v1/tasks');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error getting all tasks:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const checkFlowerCondition = (task) => {\r\n    if (task.completedAt) {\r\n      return task.flowerStatus; // Return the current flower status if the task is completed\r\n    }\r\n    const BloomingTime = 0.5;\r\n\r\n    const dueDate = new Date(task.dueDate);\r\n    const createdAt = new Date(task.createdAt);\r\n    const now = new Date();\r\n\r\n    const diffTime = (dueDate - createdAt);\r\n    const limitTime = (dueDate - now);\r\n    const timeRatio = limitTime / diffTime;\r\n\r\n    console.log(timeRatio);\r\n\r\n    if (timeRatio > 1.0) {\r\n      console.log('dead');\r\n      return 'dead';\r\n    } else if (timeRatio >= BloomingTime && timeRatio <= 1.0) {\r\n      console.log('healthy');\r\n      return 'healthy';\r\n    } else if (timeRatio < BloomingTime && timeRatio > 0) {\r\n      console.log('dying');\r\n      return 'dying';\r\n    } else {\r\n      console.log('dead');\r\n      return 'dead';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GardenContainer>\r\n      <Content>\r\n        {tasks.map((task, index) => (\r\n          <TaskFlower\r\n            key={task._id}\r\n            task={task}\r\n            index={index}\r\n            checkFlowerCondition={checkFlowerCondition}\r\n            refreshTasks={fetchTasks}\r\n          />\r\n        ))}\r\n      </Content>\r\n    </GardenContainer>\r\n  );\r\n};\r\n\r\nconst GardenContainer = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-image: url(${background});\r\n  background-size: cover;\r\n  background-position: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-template-rows: repeat(2, 1fr);\r\n  gap: 20px;\r\n  text-align: center;\r\n  color: white;\r\n  margin-left: -300px; /* Adjust this value to move the flowers to the left */\r\n  margin-top: -50px; /* Adjust this value to move the flowers up */\r\n`;\r\n\r\nexport default Garden;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from '@emotion/styled';\r\nimport background from './bouquet.jpg';\r\nimport redHealthy from './bouquetflowers/Red/redbouquet1.PNG';\r\nimport redDying from './bouquetflowers/Red/redbouquet2.PNG';\r\nimport redDead from './bouquetflowers/Red/redbouquet3.PNG';\r\nimport whiteHealthy from './bouquetflowers/White/whitebouquet1.PNG';\r\nimport whiteDying from './bouquetflowers/White/whitebouquet2.PNG';\r\nimport whiteDead from './bouquetflowers/White/whitebouquet3.PNG';\r\nimport yellowHealthy from './bouquetflowers/Yellow/yellowbouquet1.PNG';\r\nimport yellowDying from './bouquetflowers/Yellow/yellowbouquet2.PNG';\r\nimport yellowDead from './bouquetflowers/Yellow/yellowbouquet3.PNG';\r\nimport balancedHealthy from './bouquetflowers/Balanced/balancebouquet1.PNG';\r\nimport balancedDying from './bouquetflowers/Balanced/balancebouquet3.PNG';\r\nimport balancedDead from './bouquetflowers/Balanced/balancebouquet4.PNG';\r\nimport { Button, Stack } from '@mui/material'; // MUIのButtonとStackをインポート\r\n\r\nconst Bouquet = () => {\r\n  const [bouquetInfo, setBouquetInfo] = useState({});\r\n\r\n  const fetchCompletedTasks = async () => {\r\n    try {\r\n      const response = await axios.get('/api/v1/tasks/completed-this-week');\r\n      if (response.data.length > 0){\r\n        calculateBouquet(response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching completed tasks:', error);\r\n    }\r\n  };\r\n\r\n  const calculateBouquet = (tasks) => {\r\n    let studyCount = 0;\r\n    let activityCount = 0;\r\n    let houseworkCount = 0;\r\n    let points = 0;\r\n\r\n    tasks.forEach((task) => {\r\n      const condition = task.flowerStatus;\r\n      console.log(`Task ID: ${task._id}, Flower Status: ${condition}`);\r\n\r\n      if (condition === 'healthy') points += 2;\r\n      else if (condition === 'dying') points += 1;\r\n      else if (condition === 'dead') points += 0;\r\n\r\n      if (task.taskType === 'study') studyCount++;\r\n      else if (task.taskType === 'activity') activityCount++;\r\n      else if (task.taskType === 'housework') houseworkCount++;\r\n    });\r\n\r\n    const totalTasks = tasks.length;\r\n    console.log(`Total tasks: ${totalTasks}`);\r\n    console.log(`Points: ${points}`);\r\n\r\n    const completionRatio = points / (totalTasks * 2);\r\n    const studyRatio = studyCount / totalTasks;\r\n    const houseworkRatio = houseworkCount / totalTasks;\r\n    const activityRatio = activityCount / totalTasks;\r\n\r\n    console.log(`Completion Ratio: ${completionRatio}`);\r\n    console.log(`Study Ratio: ${studyRatio}`);\r\n    console.log(`Housework Ratio: ${houseworkRatio}`);\r\n    console.log(`Activity Ratio: ${activityRatio}`);\r\n\r\n    let majorityType;\r\n\r\n    // Check if ratios are balanced\r\n    if (studyRatio >= 0.25 && studyRatio <= 0.45 &&\r\n        houseworkRatio >= 0.25 && houseworkRatio <= 0.45 &&\r\n        activityRatio >= 0.25 && activityRatio <= 0.45) {\r\n      majorityType = 'Balanced';\r\n    } else {\r\n      // Create an array of ratios with their corresponding types\r\n      const ratios = [\r\n        { type: 'Red', ratio: studyRatio },\r\n        { type: 'White', ratio: activityRatio },\r\n        { type: 'Yellow', ratio: houseworkRatio }\r\n      ];\r\n\r\n      // Sort the ratios in descending order\r\n      ratios.sort((a, b) => b.ratio - a.ratio);\r\n\r\n      if (ratios[0].ratio === ratios[1].ratio) {\r\n        // Randomly choose between the top two if there's a tie\r\n        majorityType = Math.random() < 0.5 ? ratios[0].type : ratios[1].type;\r\n      } else {\r\n        // Choose the highest ratio as majorityType\r\n        majorityType = ratios[0].type;\r\n      }\r\n    }\r\n\r\n    const bouquetCondition = (completionRatio >= 0.75) ? 'Healthy' :\r\n                             (completionRatio >= 0.25) ? 'Dying' : 'Dead';\r\n\r\n    setBouquetInfo({ majorityType, bouquetCondition });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCompletedTasks();\r\n  }, []);\r\n\r\n  const getBouquetImages = (type, bouquetStatus) => {\r\n    if (type === 'Red') {\r\n      if (bouquetStatus === 'Healthy') {\r\n        return redHealthy;\r\n      } else if (bouquetStatus === 'Dying') {\r\n        return redDying;\r\n      } else if (bouquetStatus === 'Dead') {\r\n        return redDead;\r\n      }\r\n    } else if (type === 'White') {\r\n      if (bouquetStatus === 'Healthy') {\r\n        return whiteHealthy;\r\n      } else if (bouquetStatus === 'Dying') {\r\n        return whiteDying;\r\n      } else if (bouquetStatus === 'Dead') {\r\n        return whiteDead;\r\n      }\r\n    } else if (type === 'Yellow') {\r\n      if (bouquetStatus === 'Healthy') {\r\n        return yellowHealthy;\r\n      } else if (bouquetStatus === 'Dying') {\r\n        return yellowDying;\r\n      } else if (bouquetStatus === 'Dead') {\r\n        return yellowDead;\r\n      }\r\n    } else {\r\n      if (bouquetStatus === 'Healthy') {\r\n        return balancedHealthy;\r\n      } else if (bouquetStatus === 'Dying') {\r\n        return balancedDying;\r\n      } else if (bouquetStatus === 'Dead') {\r\n        return balancedDead;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BouquetContainer>\r\n      {bouquetInfo.majorityType && bouquetInfo.bouquetCondition && (\r\n        <BouquetImage\r\n          src={getBouquetImages(bouquetInfo.majorityType, bouquetInfo.bouquetCondition)}\r\n          alt=\"Bouquet\"\r\n        />\r\n      )}\r\n      <div>\r\n        <h1>Bouquet</h1>\r\n        <p>Type: {bouquetInfo.majorityType}</p>\r\n        <p>Condition: {bouquetInfo.bouquetCondition}</p>\r\n      </div>\r\n      <Stack spacing={2} direction=\"row\" sx={{ marginLeft: '300px'}}>\r\n        <Button variant=\"contained\" sx={{ backgroundColor: '#ffffff', color: '#a9a9a9'}} >花束を購入する</Button>\r\n      </Stack>\r\n    </BouquetContainer>\r\n  );\r\n};\r\n\r\nconst BouquetContainer = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-image: url(${background});\r\n  background-size: cover;\r\n  background-position: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\nconst BouquetImage = styled.img`\r\n  width: 150px;\r\n  height: 150px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport default Bouquet;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport background from './profile.jpg'; // 背景画像のパス\r\n\r\nconst Profile = () => {\r\n  // ここでユーザー情報を取得する\r\n  const userName = \"User Name\"; // 例：取得したユーザー名\r\n  const userEmail = \"user@example.com\"; // 例：取得したユーザーのメールアドレス\r\n\r\n  return (\r\n    <ProfileContainer>\r\n      <ProfileContent>\r\n        <ProfileField>\r\n          <ProfileName>{userName}</ProfileName>\r\n          <Line />\r\n        </ProfileField>\r\n        <ProfileField>\r\n          <ProfileEmail>{userEmail}</ProfileEmail>\r\n          <Line />\r\n        </ProfileField>\r\n      </ProfileContent>\r\n    </ProfileContainer>\r\n  );\r\n};\r\n\r\nconst ProfileContainer = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-image: url(${background});\r\n  background-size: cover;\r\n  background-position: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst ProfileContent = styled.div`\r\n  text-align: center;\r\n  color: black; /* テキストを見やすくするために色を設定 */\r\n`;\r\n\r\nconst ProfileField = styled.div`\r\n  position: relative;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst ProfileName = styled.div`\r\n  font-size: 20px;\r\n  position: absolute;\r\n  top: -80px; /* 線の上に表示されるように調整 */\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n`;\r\n\r\nconst ProfileEmail = styled.div`\r\n  font-size: 18px;\r\n  position: absolute;\r\n  top: 80px; /* 線の上に表示されるように調整 */\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n`;\r\n\r\nconst Line = styled.div`\r\n  width: 100%;\r\n  height: 1px;\r\n  background-color: black;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\r\nimport SignIn from './SignIn/SignIn';\r\nimport DrawerAppBar from './DrawerAppBar/DrawerAppBar';\r\nimport FlowerShop from './FlowerShop/FlowerShop';\r\nimport Garden from './Garden/Garden';\r\nimport Bouquet from './Bouquet/Bouquet';\r\nimport Profile from './Profile/Profile'; // プロフィール画面をインポート\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/sign-in\" element={<SignIn />} />\r\n        <Route\r\n          path=\"/*\"\r\n          element={\r\n            <>\r\n              <DrawerAppBar />\r\n              <Routes>\r\n                <Route path=\"/flower-shop\" element={<FlowerShop />} />\r\n                <Route path=\"/garden\" element={<Garden />} />\r\n                <Route path=\"/bouquet\" element={<Bouquet />} />\r\n                <Route path=\"/profile\" element={<Profile />} /> {/* プロフィール画面 */}\r\n                <Route path=\"/\" element={<Navigate to=\"/flower-shop\" />} /> {/* Default route after login */}\r\n              </Routes>\r\n            </>\r\n          }\r\n        />\r\n        <Route path=\"/\" element={<Navigate to=\"/sign-in\" />} /> {/* 初期ルートをログイン画面にリダイレクト */}\r\n        <Route path=\"*\" element={<Navigate to=\"/sign-in\" />} /> {/* 未定義ルートもログイン画面にリダイレクト */}\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}