{"version":3,"sources":["Garden/FlowersIMGFile/Tulip/Blooming.png","Garden/FlowersIMGFile/Tulip/Half-blooming.png","Garden/FlowersIMGFile/Tulip/Withered.png","SignIn/signup-back.jpg","FlowerShop/flower_shop.jpg","Garden/garden_back.jpg","Bouquet/bouquet.jpg","Bouquet/bouquetflowers/Red/redbouquet1.PNG","Bouquet/bouquetflowers/Red/redbouquet2.PNG","Bouquet/bouquetflowers/Red/redbouquet3.PNG","Bouquet/bouquetflowers/White/whitebouquet1.PNG","Bouquet/bouquetflowers/White/whitebouquet2.PNG","Bouquet/bouquetflowers/White/whitebouquet3.PNG","Bouquet/bouquetflowers/Yellow/yellowbouquet1.PNG","Bouquet/bouquetflowers/Yellow/yellowbouquet2.PNG","Bouquet/bouquetflowers/Yellow/yellowbouquet3.PNG","Bouquet/bouquetflowers/Balanced/balancebouquet1.PNG","Bouquet/bouquetflowers/Balanced/balancebouquet3.PNG","Bouquet/bouquetflowers/Balanced/balancebouquet4.PNG","Profile/profile.jpg","SignIn/SignIn.js","DrawerAppBar/DrawerAppBar.js","FlowerShop/FlowerShop.js","Garden/TaskFlower/TaskFlower.js","Garden/Garden.js","Bouquet/Bouquet.js","Profile/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","AppContainer","styled","div","_templateObject","_taggedTemplateLiteral","background","StyledPaper","Paper","_templateObject2","SignIn","open","setOpen","useState","navigate","useNavigate","handleOpen","prevOpen","React","createElement","Button","variant","onClick","sx","bgcolor","color","Modal","onClose","className","onSubmit","event","preventDefault","Typography","TextField","label","type","navItems","text","link","DrawerAppBar","props","window","mobileOpen","setMobileOpen","handleDrawerToggle","prevState","drawer","Box","textAlign","Divider","List","map","item","ListItem","key","disablePadding","ListItemButton","component","Link","to","ListItemText","primary","container","undefined","document","body","display","CssBaseline","AppBar","Toolbar","xs","sm","mr","IconButton","aria-label","edge","MenuIcon","flexGrow","handleProfileClick","AccountCircle","Drawer","ModalProps","keepMounted","boxSizing","width","p","style","position","top","left","transform","border","boxShadow","FlowerShop","title","setTitle","description","setDescription","duetime","setDueTime","taskType","setTaskType","handleClose","backgroundImage","concat","flowerShopBackground","backgroundSize","backgroundPosition","height","Stack","spacing","direction","backgroundColor","aria-labelledby","aria-describedby","id","fullWidth","value","onChange","e","target","mb","LocalizationProvider","dateAdapter","AdapterDayjs","DateTimePicker","newValue","renderInput","params","Object","assign","FormControl","InputLabel","Select","labelId","MenuItem","justifyContent","async","axios","post","dueDate","Date","flowerImages","console","log","error","response","data","message","alert","FlowerWrapper","FlowerImage","img","Tooltip","_templateObject3","TaskFlower","_ref","task","index","checkFlowerCondition","refreshTasks","tooltipVisible","setTooltipVisible","src","flowerStatus","Tulip_Blooming","Tulip_Half_Blooming","Tulip_Withered","alt","flower","toggleTooltip","toLocaleString","year","month","day","hour","minute","put","_id","completedAt","isCompleted","delete","GardenContainer","Content","Garden","tasks","setTasks","fetchTasks","getAllTasks","filter","useEffect","interval","setInterval","clearInterval","get","createdAt","timeRatio","BouquetContainer","BouquetImage","Bouquet","bouquetInfo","setBouquetInfo","calculateBouquet","studyCount","activityCount","houseworkCount","points","forEach","condition","totalTasks","length","completionRatio","studyRatio","houseworkRatio","activityRatio","majorityType","ratios","ratio","sort","a","b","Math","random","bouquetCondition","fetchCompletedTasks","getBouquetImages","bouquetStatus","redHealthy","redDying","redDead","whiteHealthy","whiteDying","whiteDead","yellowHealthy","yellowDying","yellowDead","balancedHealthy","balancedDying","balancedDead","marginLeft","ProfileContainer","ProfileContent","ProfileField","ProfileName","_templateObject4","ProfileEmail","_templateObject5","Line","_templateObject6","Profile","App","Router","Routes","Route","path","element","Fragment","Navigate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.25cc1e2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Blooming.7037eb81.png\";","module.exports = __webpack_public_path__ + \"static/media/Half-blooming.7f4aab7c.png\";","module.exports = __webpack_public_path__ + \"static/media/Withered.579cf8ea.png\";","module.exports = __webpack_public_path__ + \"static/media/signup-back.9128d8b9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/flower_shop.21593905.jpg\";","module.exports = __webpack_public_path__ + \"static/media/garden_back.800ac21a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bouquet.5d29bd76.jpg\";","module.exports = __webpack_public_path__ + \"static/media/redbouquet1.bb75a8cc.PNG\";","module.exports = __webpack_public_path__ + \"static/media/redbouquet2.ebcdae83.PNG\";","module.exports = __webpack_public_path__ + \"static/media/redbouquet3.24100032.PNG\";","module.exports = __webpack_public_path__ + \"static/media/whitebouquet1.e91254ca.PNG\";","module.exports = __webpack_public_path__ + \"static/media/whitebouquet2.c3a8355c.PNG\";","module.exports = __webpack_public_path__ + \"static/media/whitebouquet3.61554c52.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yellowbouquet1.2aabfd45.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yellowbouquet2.344ef54c.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yellowbouquet3.bb721d22.PNG\";","module.exports = __webpack_public_path__ + \"static/media/balancebouquet1.0711bb0e.PNG\";","module.exports = __webpack_public_path__ + \"static/media/balancebouquet3.344b599a.PNG\";","module.exports = __webpack_public_path__ + \"static/media/balancebouquet4.aa056363.PNG\";","module.exports = __webpack_public_path__ + \"static/media/profile.413c3d40.jpg\";","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { useNavigate } from 'react-router-dom';\nimport { Button, Modal, Paper, TextField, Typography } from '@mui/material';\nimport background from './signup-back.jpg'; // 新しい背景画像のパス\n\nconst SignIn = () => {\n  const [open, setOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const handleOpen = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleSignIn = (event) => {\n    event.preventDefault();\n    setOpen(false);\n    navigate('/garden'); // ログインボタンでガーデン画面に遷移\n  };\n\n  return (\n    <AppContainer>\n      <Button variant=\"contained\" onClick={handleOpen} sx={{ bgcolor: '#ffffff', color: '#a9a9a9' }}>ログイン画面へ</Button>\n      <Modal open={open} onClose={handleOpen}>\n        <StyledPaper>\n          <form className='form' onSubmit={handleSignIn}>\n            <Typography variant={'h5'}>Sign In</Typography>\n            <TextField label=\"Email address\" variant=\"standard\" className=\"text\" />\n            <TextField label=\"Password\" variant=\"standard\" className=\"text\" type=\"password\" />\n            <center><Button type=\"submit\" className=\"login btn\">Sign In</Button></center>\n            <center><Button className=\"signup btn\">register</Button></center>\n            <center><Button variant=\"outlined\" onClick={handleOpen}>close</Button></center>\n          </form>\n        </StyledPaper>\n      </Modal>\n    </AppContainer>\n  );\n};\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${background});\n  background-size: cover;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst StyledPaper = styled(Paper)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 960px;\n  height: 540px;\n  .form {\n    width: 60%;\n    margin: 3rem;\n    text-align: center;\n  }\n  .text {\n    width: 100%;\n    margin: 1rem 0;\n  }\n  .btn {\n    width: 60%;\n    color: white;\n    text-align: center;\n    margin: 1.5rem 0;\n  }\n  .login {\n    background-color: #66cdaa;\n  }\n  .signup {\n    background-color: #008080;\n  }\n`;\n\nexport default SignIn;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Divider from '@mui/material/Divider';\nimport Drawer from '@mui/material/Drawer';\nimport IconButton from '@mui/material/IconButton';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Toolbar from '@mui/material/Toolbar';\nimport Button from '@mui/material/Button';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport { Link, useNavigate } from 'react-router-dom';\n\nconst drawerWidth = 240;\nconst navItems = [\n  { text: 'flower shop', link: '/flower-shop' },\n  { text: 'garden', link: '/garden' },\n  { text: 'bouquet', link: '/bouquet' }\n];\n\nfunction DrawerAppBar(props) {\n  const { window } = props;\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const navigate = useNavigate();\n\n  const handleDrawerToggle = () => {\n    setMobileOpen((prevState) => !prevState);\n  };\n\n  const handleProfileClick = () => {\n    navigate('/profile');\n  };\n\n  const drawer = (\n    <Box onClick={handleDrawerToggle} sx={{ textAlign: 'center' }}>\n      <Divider />\n      <List>\n        {navItems.map((item) => (\n          <ListItem key={item.text} disablePadding>\n            <ListItemButton component={Link} to={item.link} sx={{ textAlign: 'center' }}>\n              <ListItemText primary={item.text} />\n            </ListItemButton>\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      <AppBar component=\"nav\" sx={{ bgcolor: '#ffffff' }}> {/* AppBarの色を設定 */}\n        <Toolbar>\n          <Box sx={{ display: { xs: 'none', sm: 'block' }, mr: 2 }}>\n            {navItems.map((item) => (\n              <Button key={item.text} component={Link} to={item.link} sx={{ color: '#a9a9a9' }}>\n                {item.text}\n              </Button>\n            ))}\n          </Box>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { sm: 'none' }, color: '#a9a9a9' }} // メニューアイコンの色を設定\n          >\n            <MenuIcon />\n          </IconButton>\n          <Box sx={{ flexGrow: 1 }} />\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"account\"\n            edge=\"end\"\n            onClick={handleProfileClick} // プロフィール画面に遷移\n            sx={{ color: '#a9a9a9' }} // アカウントアイコンの色を設定\n          >\n            <AccountCircle />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <nav>\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </nav>\n      <Box component=\"main\" sx={{ p: 3 }}>\n        <Toolbar />\n      </Box>\n    </Box>\n  );\n}\n\nDrawerAppBar.propTypes = {\n  window: PropTypes.func,\n};\n\nexport default DrawerAppBar;\n","\r\n// import React, { useState } from 'react';\r\n// import { Button, Stack, Modal, Box, TextField, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\n// import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\n// import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\n// import { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\n// import axios from 'axios';\r\n// import flowerShopBackground from './flower_shop.jpg';\r\n\r\n// const style = {\r\n//   position: 'absolute',\r\n//   top: '50%',\r\n//   left: '50%',\r\n//   transform: 'translate(-50%, -50%)',\r\n//   width: 400,\r\n//   bgcolor: 'background.paper',\r\n//   border: '2px solid #000',\r\n//   boxShadow: 24,\r\n//   p: 4,\r\n// };\r\n\r\n// function FlowerShop() {\r\n//   const [open, setOpen] = useState(false);\r\n//   const [flower, setFlower] = useState('');\r\n//   const [color, setColor] = useState('');\r\n//   const [title, setTitle] = useState('');\r\n//   const [description, setDescription] = useState('');\r\n//   const [duetime, setDueTime] = useState(null);\r\n\r\n//   const handleOpen = () => setOpen(true);\r\n//   const handleClose = () => setOpen(false);\r\n\r\n//   const handleSubmit = async () => {\r\n//     if (!title || !description || !duetime || !flower || !color) {\r\n//       alert('You have missing input');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       await axios.post('/api/v1/task', {\r\n//         title,\r\n//         description,\r\n//         dueDate: new Date(duetime),\r\n//         flower,\r\n//         color,\r\n//         flowerImages: 'tulip',\r\n//       });\r\n//       console.log('タスクを作成しました');\r\n//       handleClose();\r\n//     } catch (error) {\r\n//       console.error('Error creating task:', error);\r\n//       if (error.response && error.response.data.message === 'Please complete the tasks you currently have before adding a new one.') {\r\n//         alert('You already have 8 tasks. Let\\'s complete one before adding more');\r\n//       } else {\r\n//         alert('タスクの作成に失敗しました');\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ \r\n//       backgroundImage: `url(${flowerShopBackground})`, \r\n//       backgroundSize: 'cover', \r\n//       backgroundPosition: 'center', \r\n//       height: '100vh', \r\n//       position: 'relative' \r\n//     }}>\r\n//       <Stack spacing={2} direction=\"row\" sx={{ position: 'absolute', top: '65%', left: '67%', transform: 'translate(-50%, -50%)' }}>\r\n//         <Button variant=\"contained\" onClick={handleOpen} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスクを作成</Button>      \r\n//       </Stack>\r\n//       <Modal\r\n//         open={open}\r\n//         onClose={handleClose}\r\n//         aria-labelledby=\"modal-title\"\r\n//         aria-describedby=\"modal-description\"\r\n//       >\r\n//         <Box sx={style}>\r\n//           <h2 id=\"modal-title\">タスク作成</h2>\r\n//           <TextField \r\n//             fullWidth \r\n//             label=\"タスク名\" \r\n//             variant=\"standard\" \r\n//             value={title}\r\n//             onChange={(e) => setTitle(e.target.value)}\r\n//             sx={{ mb: 2 }} \r\n//           />\r\n//           <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n//             <DateTimePicker\r\n//               label=\"期限\"\r\n//               value={duetime}\r\n//               onChange={(newValue) => setDueTime(newValue)}\r\n//               renderInput={(params) => <TextField {...params} fullWidth sx={{ mb: 2 }} />}\r\n//             />\r\n//           </LocalizationProvider>\r\n//           <TextField \r\n//             fullWidth \r\n//             label=\"コメント\" \r\n//             variant=\"standard\"\r\n//             value={description}\r\n//             onChange={(e) => setDescription(e.target.value)}\r\n//             sx={{ mb: 2 }} \r\n//           />\r\n//           <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n//             <InputLabel id=\"flower-label\">花の名前</InputLabel>\r\n//             <Select\r\n//               labelId=\"flower-label\"\r\n//               id=\"flower-select\"\r\n//               value={flower}\r\n//               onChange={(e) => setFlower(e.target.value)}\r\n//               label=\"花の名前\"\r\n//             >\r\n//               <MenuItem value=\"\">\r\n//                 <em>None</em>\r\n//               </MenuItem>\r\n//               <MenuItem value=\"tulip\">チューリップ</MenuItem>\r\n//               <MenuItem value=\"marguerite\">マーガレット</MenuItem>\r\n//               <MenuItem value=\"rose\">バラ</MenuItem>\r\n//             </Select>\r\n//           </FormControl>\r\n//           <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n//             <InputLabel id=\"color-label\">色</InputLabel>\r\n//             <Select\r\n//               labelId=\"color-label\"\r\n//               id=\"color-select\"\r\n//               value={color}\r\n//               onChange={(e) => setColor(e.target.value)}\r\n//               label=\"色\"\r\n//             >\r\n//               <MenuItem value=\"\">\r\n//                 <em>None</em>\r\n//               </MenuItem>\r\n//               <MenuItem value=\"red\">赤</MenuItem>\r\n//               <MenuItem value=\"blue\">青</MenuItem>\r\n//               <MenuItem value=\"yellow\">黄色</MenuItem>\r\n//             </Select>\r\n//           </FormControl>\r\n//           <Stack spacing={2} direction=\"row\" justifyContent=\"center\">\r\n//             <Button variant=\"contained\" onClick={handleSubmit} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスク作成</Button>        \r\n//           </Stack>\r\n//         </Box>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default FlowerShop;\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Stack, Modal, Box, TextField, FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\r\nimport axios from 'axios';\r\nimport flowerShopBackground from './flower_shop.jpg';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nfunction FlowerShop() {\r\n  const [open, setOpen] = useState(false);\r\n  //const [flower, setFlower] = useState('');\r\n  //const [color, setColor] = useState('');\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [duetime, setDueTime] = useState(null);\r\n  const [taskType, setTaskType] = useState('');\r\n\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const handleSubmit = async () => {\r\n    if (!title || !description || !duetime ||/* !flower || !color ||*/ !taskType) {\r\n      alert('You have missing input');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.post('/api/v1/task', {\r\n        title,\r\n        description,\r\n        dueDate: new Date(duetime),\r\n        //flower,\r\n        //color,\r\n        flowerImages: 'tulip',\r\n        taskType,\r\n      });\r\n      console.log('タスクを作成しました');\r\n      setTitle('');\r\n      setDescription('');\r\n      setDueTime();\r\n      setTaskType('');\r\n\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      if (error.response && error.response.data.message === 'Error') {\r\n        alert('You already have 8 tasks. Let\\'s complete one before adding more');\r\n      } else {\r\n        alert('タスクの作成に失敗しました');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ \r\n      backgroundImage: `url(${flowerShopBackground})`, \r\n      backgroundSize: 'cover', \r\n      backgroundPosition: 'center', \r\n      height: '100vh', \r\n      position: 'relative' \r\n    }}>\r\n      <Stack spacing={2} direction=\"row\" sx={{ position: 'absolute', top: '65%', left: '67%', transform: 'translate(-50%, -50%)' }}>\r\n        <Button variant=\"contained\" onClick={handleOpen} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスクを作成</Button>      \r\n      </Stack>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-title\"\r\n        aria-describedby=\"modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <h2 id=\"modal-title\">タスク作成</h2>\r\n          <TextField \r\n            fullWidth \r\n            label=\"タスク名\" \r\n            variant=\"standard\" \r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            sx={{ mb: 2 }} \r\n          />\r\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n            <DateTimePicker\r\n              label=\"期限\"\r\n              value={duetime}\r\n              onChange={(newValue) => setDueTime(newValue)}\r\n              renderInput={(params) => <TextField {...params} fullWidth sx={{ mb: 2 }} />}\r\n            />\r\n          </LocalizationProvider>\r\n          <TextField \r\n            fullWidth \r\n            label=\"コメント\" \r\n            variant=\"standard\"\r\n            value={description}\r\n            onChange={(e) => setDescription(e.target.value)}\r\n            sx={{ mb: 2 }} \r\n          />\r\n          {/* <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"flower-label\">花の名前</InputLabel>\r\n            <Select\r\n              labelId=\"flower-label\"\r\n              id=\"flower-select\"\r\n              value={flower}\r\n              onChange={(e) => setFlower(e.target.value)}\r\n              label=\"花の名前\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"tulip\">チューリップ</MenuItem>\r\n              <MenuItem value=\"marguerite\">マーガレット</MenuItem>\r\n              <MenuItem value=\"rose\">バラ</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"color-label\">色</InputLabel>\r\n            <Select\r\n              labelId=\"color-label\"\r\n              id=\"color-select\"\r\n              value={color}\r\n              onChange={(e) => setColor(e.target.value)}\r\n              label=\"色\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"red\">赤</MenuItem>\r\n              <MenuItem value=\"blue\">青</MenuItem>\r\n              <MenuItem value=\"yellow\">黄色</MenuItem>\r\n            </Select>\r\n          </FormControl> */}\r\n          <FormControl variant=\"standard\" fullWidth sx={{ mb: 2 }}>\r\n            <InputLabel id=\"taskType-label\">タスクタイプ</InputLabel>\r\n            <Select\r\n              labelId=\"taskType-label\"\r\n              id=\"taskType-select\"\r\n              value={taskType}\r\n              onChange={(e) => setTaskType(e.target.value)}\r\n              label=\"タスクタイプ\"\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>None</em>\r\n              </MenuItem>\r\n              <MenuItem value=\"study\">勉強</MenuItem>\r\n              <MenuItem value=\"housework\">家事</MenuItem>\r\n              <MenuItem value=\"activity\">活動</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n          <Stack spacing={2} direction=\"row\" justifyContent=\"center\">\r\n            <Button variant=\"contained\" onClick={handleSubmit} sx={{ backgroundColor: '#ffffff', color: '#a9a9a9' }}>タスク作成</Button>        \r\n          </Stack>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FlowerShop;\r\n","\nimport React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\n\nimport Tulip_Blooming from '../FlowersIMGFile/Tulip/Blooming.png';\nimport Tulip_Half_Blooming from '../FlowersIMGFile/Tulip/Half-blooming.png';\nimport Tulip_Withered from '../FlowersIMGFile/Tulip/Withered.png';\n\nconst TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n\n  const toggleTooltip = () => {\n    setTooltipVisible(!tooltipVisible);\n  };\n\n  const deleteTask = async () => {\n    try {\n      await axios.delete(`/api/v1/task/${task._id}`);\n      console.log('タスクを削除しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      alert('タスクの削除に失敗しました');\n    }\n  };\n\n  const markAsCompleted = async () => {\n    try {\n      const flowerStatus = checkFlowerCondition(task);\n      await axios.put(`/api/v1/task/complete/${task._id}`, {\n        flowerStatus,\n        taskType: task.taskType,\n        completedAt: new Date(),\n        isCompleted: true,\n      });\n      console.log('タスクを完了しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error marking task as completed:', error);\n      alert('タスクの完了に失敗しました');\n    }\n  };\n\n  const getFlowerImage = (flowerStatus) => {\n    if (flowerStatus === 'healthy') {\n      return Tulip_Blooming;\n    } else if (flowerStatus === 'dying') {\n      return Tulip_Half_Blooming;\n    } else {\n      return Tulip_Withered;\n    }\n  };\n\n  return (\n    <FlowerWrapper>\n      <FlowerImage\n        index={index}\n        src={getFlowerImage(checkFlowerCondition(task))}\n        alt={task.flower}\n        onClick={toggleTooltip}\n      />\n      {tooltipVisible && (\n        <Tooltip>\n          <p>タイトル：{task.title}</p>\n          <p>内容：{task.description}</p>\n          {/* <p>期限：{task.dueDate}</p> */}\n          <p>期限：{new Date(task.dueDate).toLocaleString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })}</p>\n          <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n        </Tooltip>\n      )}\n    </FlowerWrapper>\n  );\n};\n\nconst FlowerWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  margin: 10px;\n`;\n\nconst FlowerImage = styled.img`\n  width: 150px;\n  height: 150px;\n  cursor: pointer;\n`;\n\nconst Tooltip = styled.div`\n  visibility: visible;\n  width: 200px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -100px;\n  opacity: 1;\n  transition: opacity 0.3s;\n`;\n\nexport default TaskFlower;\n","\nimport React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport background from './garden_back.jpg';\nimport axios from 'axios';\nimport TaskFlower from './TaskFlower/TaskFlower';\n\nimport Tulip_Blooming from './FlowersIMGFile/Tulip/Blooming.png';\nimport Tulip_Half_Blooming from './FlowersIMGFile/Tulip/Half-blooming.png';\nimport Tulip_Withered from './FlowersIMGFile/Tulip/Withered.png';\n\nconst Garden = () => {\n  const [tasks, setTasks] = useState([]);\n\n  const fetchTasks = async () => {\n    const data = await getAllTasks();\n    setTasks(data.filter(task => !task.completedAt)); // Filter out completed tasks\n  };\n\n  useEffect(() => {\n    fetchTasks();\n    const interval = setInterval(fetchTasks, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getAllTasks = async () => {\n    try {\n      const response = await axios.get('/api/v1/tasks');\n      return response.data;\n    } catch (error) {\n      console.error('Error getting all tasks:', error);\n      return [];\n    }\n  };\n\n  const checkFlowerCondition = (task) => {\n    if (task.completedAt) {\n      return task.flowerStatus; // Return the current flower status if the task is completed\n    }\n    const BloomingTime = 0.5;\n\n    const dueDate = new Date(task.dueDate);\n    const createdAt = new Date(task.createdAt);\n    const now = new Date();\n\n    const diffTime = (dueDate - createdAt);\n    const limitTime = (dueDate - now);\n    const timeRatio = limitTime / diffTime;\n\n    console.log(timeRatio);\n\n    if (timeRatio > 1.0) {\n      console.log('dead');\n      return 'dead';\n    } else if (timeRatio >= BloomingTime && timeRatio <= 1.0) {\n      console.log('healthy');\n      return 'healthy';\n    } else if (timeRatio < BloomingTime && timeRatio > 0) {\n      console.log('dying');\n      return 'dying';\n    } else {\n      console.log('dead');\n      return 'dead';\n    }\n  };\n\n  return (\n    <GardenContainer>\n      <Content>\n        {tasks.map((task, index) => (\n          <TaskFlower\n            key={task._id}\n            task={task}\n            index={index}\n            checkFlowerCondition={checkFlowerCondition}\n            refreshTasks={fetchTasks}\n          />\n        ))}\n      </Content>\n    </GardenContainer>\n  );\n};\n\nconst GardenContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${background});\n  background-size: cover;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: repeat(2, 1fr);\n  gap: 20px;\n  text-align: center;\n  color: white;\n  margin-left: -300px; /* Adjust this value to move the flowers to the left */\n  margin-top: -50px; /* Adjust this value to move the flowers up */\n`;\n\nexport default Garden;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport background from './bouquet.jpg';\nimport redHealthy from './bouquetflowers/Red/redbouquet1.PNG';\nimport redDying from './bouquetflowers/Red/redbouquet2.PNG';\nimport redDead from './bouquetflowers/Red/redbouquet3.PNG';\nimport whiteHealthy from './bouquetflowers/White/whitebouquet1.PNG';\nimport whiteDying from './bouquetflowers/White/whitebouquet2.PNG';\nimport whiteDead from './bouquetflowers/White/whitebouquet3.PNG';\nimport yellowHealthy from './bouquetflowers/Yellow/yellowbouquet1.PNG';\nimport yellowDying from './bouquetflowers/Yellow/yellowbouquet2.PNG';\nimport yellowDead from './bouquetflowers/Yellow/yellowbouquet3.PNG';\nimport balancedHealthy from './bouquetflowers/Balanced/balancebouquet1.PNG';\nimport balancedDying from './bouquetflowers/Balanced/balancebouquet3.PNG';\nimport balancedDead from './bouquetflowers/Balanced/balancebouquet4.PNG';\nimport { Button, Stack } from '@mui/material'; // MUIのButtonとStackをインポート\n\nconst Bouquet = () => {\n  const [bouquetInfo, setBouquetInfo] = useState({});\n\n  const fetchCompletedTasks = async () => {\n    try {\n      const response = await axios.get('/api/v1/tasks/completed-this-week');\n      if (response.data.length > 0){\n        calculateBouquet(response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching completed tasks:', error);\n    }\n  };\n\n  const calculateBouquet = (tasks) => {\n    let studyCount = 0;\n    let activityCount = 0;\n    let houseworkCount = 0;\n    let points = 0;\n\n    tasks.forEach((task) => {\n      const condition = task.flowerStatus;\n      console.log(`Task ID: ${task._id}, Flower Status: ${condition}`);\n\n      if (condition === 'healthy') points += 2;\n      else if (condition === 'dying') points += 1;\n      else if (condition === 'dead') points += 0;\n\n      if (task.taskType === 'study') studyCount++;\n      else if (task.taskType === 'activity') activityCount++;\n      else if (task.taskType === 'housework') houseworkCount++;\n    });\n\n    const totalTasks = tasks.length;\n    console.log(`Total tasks: ${totalTasks}`);\n    console.log(`Points: ${points}`);\n\n    const completionRatio = points / (totalTasks * 2);\n    const studyRatio = studyCount / totalTasks;\n    const houseworkRatio = houseworkCount / totalTasks;\n    const activityRatio = activityCount / totalTasks;\n\n    console.log(`Completion Ratio: ${completionRatio}`);\n    console.log(`Study Ratio: ${studyRatio}`);\n    console.log(`Housework Ratio: ${houseworkRatio}`);\n    console.log(`Activity Ratio: ${activityRatio}`);\n\n    let majorityType;\n\n    // Check if ratios are balanced\n    if (studyRatio >= 0.25 && studyRatio <= 0.45 &&\n        houseworkRatio >= 0.25 && houseworkRatio <= 0.45 &&\n        activityRatio >= 0.25 && activityRatio <= 0.45) {\n      majorityType = 'Balanced';\n    } else {\n      // Create an array of ratios with their corresponding types\n      const ratios = [\n        { type: 'Red', ratio: studyRatio },\n        { type: 'White', ratio: activityRatio },\n        { type: 'Yellow', ratio: houseworkRatio }\n      ];\n\n      // Sort the ratios in descending order\n      ratios.sort((a, b) => b.ratio - a.ratio);\n\n      if (ratios[0].ratio === ratios[1].ratio) {\n        // Randomly choose between the top two if there's a tie\n        majorityType = Math.random() < 0.5 ? ratios[0].type : ratios[1].type;\n      } else {\n        // Choose the highest ratio as majorityType\n        majorityType = ratios[0].type;\n      }\n    }\n\n    const bouquetCondition = (completionRatio >= 0.75) ? 'Healthy' :\n                             (completionRatio >= 0.25) ? 'Dying' : 'Dead';\n\n    setBouquetInfo({ majorityType, bouquetCondition });\n  };\n\n  useEffect(() => {\n    fetchCompletedTasks();\n  }, []);\n\n  const getBouquetImages = (type, bouquetStatus) => {\n    if (type === 'Red') {\n      if (bouquetStatus === 'Healthy') {\n        return redHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return redDying;\n      } else if (bouquetStatus === 'Dead') {\n        return redDead;\n      }\n    } else if (type === 'White') {\n      if (bouquetStatus === 'Healthy') {\n        return whiteHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return whiteDying;\n      } else if (bouquetStatus === 'Dead') {\n        return whiteDead;\n      }\n    } else if (type === 'Yellow') {\n      if (bouquetStatus === 'Healthy') {\n        return yellowHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return yellowDying;\n      } else if (bouquetStatus === 'Dead') {\n        return yellowDead;\n      }\n    } else {\n      if (bouquetStatus === 'Healthy') {\n        return balancedHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return balancedDying;\n      } else if (bouquetStatus === 'Dead') {\n        return balancedDead;\n      }\n    }\n  };\n\n  return (\n    <BouquetContainer>\n      {bouquetInfo.majorityType && bouquetInfo.bouquetCondition && (\n        <BouquetImage\n          src={getBouquetImages(bouquetInfo.majorityType, bouquetInfo.bouquetCondition)}\n          alt=\"Bouquet\"\n        />\n      )}\n      <div>\n        <h1>Bouquet</h1>\n        <p>Type: {bouquetInfo.majorityType}</p>\n        <p>Condition: {bouquetInfo.bouquetCondition}</p>\n      </div>\n      <Stack spacing={2} direction=\"row\" sx={{ marginLeft: '300px'}}>\n        <Button variant=\"contained\" sx={{ backgroundColor: '#ffffff', color: '#a9a9a9'}} >花束を購入する</Button>\n      </Stack>\n    </BouquetContainer>\n  );\n};\n\nconst BouquetContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${background});\n  background-size: cover;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\nconst BouquetImage = styled.img`\n  width: 150px;\n  height: 150px;\n  cursor: pointer;\n`;\n\nexport default Bouquet;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport background from './profile.jpg'; // 背景画像のパス\n\nconst Profile = () => {\n  // ここでユーザー情報を取得する\n  const userName = \"User Name\"; // 例：取得したユーザー名\n  const userEmail = \"user@example.com\"; // 例：取得したユーザーのメールアドレス\n\n  return (\n    <ProfileContainer>\n      <ProfileContent>\n        <ProfileField>\n          <ProfileName>{userName}</ProfileName>\n          <Line />\n        </ProfileField>\n        <ProfileField>\n          <ProfileEmail>{userEmail}</ProfileEmail>\n          <Line />\n        </ProfileField>\n      </ProfileContent>\n    </ProfileContainer>\n  );\n};\n\nconst ProfileContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${background});\n  background-size: cover;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ProfileContent = styled.div`\n  text-align: center;\n  color: black; /* テキストを見やすくするために色を設定 */\n`;\n\nconst ProfileField = styled.div`\n  position: relative;\n  margin: 20px 0;\n`;\n\nconst ProfileName = styled.div`\n  font-size: 20px;\n  position: absolute;\n  top: -80px; /* 線の上に表示されるように調整 */\n  left: 50%;\n  transform: translateX(-50%);\n`;\n\nconst ProfileEmail = styled.div`\n  font-size: 18px;\n  position: absolute;\n  top: 80px; /* 線の上に表示されるように調整 */\n  left: 50%;\n  transform: translateX(-50%);\n`;\n\nconst Line = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: black;\n  margin: 0 auto;\n`;\n\nexport default Profile;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport SignIn from './SignIn/SignIn';\nimport DrawerAppBar from './DrawerAppBar/DrawerAppBar';\nimport FlowerShop from './FlowerShop/FlowerShop';\nimport Garden from './Garden/Garden';\nimport Bouquet from './Bouquet/Bouquet';\nimport Profile from './Profile/Profile'; // プロフィール画面をインポート\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/sign-in\" element={<SignIn />} />\n        <Route\n          path=\"/*\"\n          element={\n            <>\n              <DrawerAppBar />\n              <Routes>\n                <Route path=\"/flower-shop\" element={<FlowerShop />} />\n                <Route path=\"/garden\" element={<Garden />} />\n                <Route path=\"/bouquet\" element={<Bouquet />} />\n                <Route path=\"/profile\" element={<Profile />} /> {/* プロフィール画面 */}\n                <Route path=\"/\" element={<Navigate to=\"/flower-shop\" />} /> {/* Default route after login */}\n              </Routes>\n            </>\n          }\n        />\n        <Route path=\"/\" element={<Navigate to=\"/sign-in\" />} /> {/* 初期ルートをログイン画面にリダイレクト */}\n        <Route path=\"*\" element={<Navigate to=\"/sign-in\" />} /> {/* 未定義ルートもログイン画面にリダイレクト */}\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}