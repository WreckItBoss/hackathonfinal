{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/issey/hackathon/hackathonfinal/hackathon-front-main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import styled from '@emotion/styled';\n// import background from './bouquet.jpg';\n// import redHealthy from './bouquetflowers/Red/redbouquet1.PNG';\n// import redDying from './bouquetflowers/Red/redbouquet2.PNG';\n// import redDead from './bouquetflowers/Red/redbouquet3.PNG';\n// import whiteHealthy from './bouquetflowers/White/whitebouquet1.PNG';\n// import whiteDying from './bouquetflowers/White/whitebouquet2.PNG';\n// import whiteDead from './bouquetflowers/White/whitebouquet3.PNG';\n// import yellowHealthy from './bouquetflowers/Yellow/yellowbouquet1.PNG';\n// import yellowDying from './bouquetflowers/Yellow/yellowbouquet2.PNG';\n// import yellowDead from './bouquetflowers/Yellow/yellowbouquet3.PNG';\n// import balancedHealthy from './bouquetflowers/Balanced/balancebouquet1.PNG';\n// import balancedDying from './bouquetflowers/Balanced/balancebouquet3.PNG';\n// import balancedDead from './bouquetflowers/Balanced/balancebouquet4.PNG';\n// import { Button, Stack } from '@mui/material'; // MUIのButtonとStackをインポート\n// const Bouquet = () => {\n//   const [bouquetInfo, setBouquetInfo] = useState({});\n//   const fetchCompletedTasks = async () => {\n//     try {\n//       const response = await axios.get('/api/v1/tasks/completed-this-week');\n//       if (response.data.length > 0){\n//         calculateBouquet(response.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed tasks:', error);\n//     }\n//   };\n//   const calculateBouquet = (tasks) => {\n//     let studyCount = 0;\n//     let activityCount = 0;\n//     let houseworkCount = 0;\n//     let points = 0;\n//     tasks.forEach((task) => {\n//       const condition = task.flowerStatus;\n//       console.log(`Task ID: ${task._id}, Flower Status: ${condition}`);\n//       if (condition === 'healthy') points += 2;\n//       else if (condition === 'dying') points += 1;\n//       else if (condition === 'dead') points += 0;\n//       if (task.taskType === 'study') studyCount++;\n//       else if (task.taskType === 'activity') activityCount++;\n//       else if (task.taskType === 'housework') houseworkCount++;\n//     });\n//     const totalTasks = tasks.length;\n//     console.log(`Total tasks: ${totalTasks}`);\n//     console.log(`Points: ${points}`);\n//     const completionRatio = points / (totalTasks * 2);\n//     const studyRatio = studyCount / totalTasks;\n//     const houseworkRatio = houseworkCount / totalTasks;\n//     const activityRatio = activityCount / totalTasks;\n//     console.log(`Completion Ratio: ${completionRatio}`);\n//     console.log(`Study Ratio: ${studyRatio}`);\n//     console.log(`Housework Ratio: ${houseworkRatio}`);\n//     console.log(`Activity Ratio: ${activityRatio}`);\n//     let majorityType;\n//     // Check if ratios are balanced\n//     if (studyRatio >= 0.25 && studyRatio <= 0.45 &&\n//         houseworkRatio >= 0.25 && houseworkRatio <= 0.45 &&\n//         activityRatio >= 0.25 && activityRatio <= 0.45) {\n//       majorityType = 'Balanced';\n//     } else {\n//       // Create an array of ratios with their corresponding types\n//       const ratios = [\n//         { type: 'Red', ratio: studyRatio },\n//         { type: 'White', ratio: activityRatio },\n//         { type: 'Yellow', ratio: houseworkRatio }\n//       ];\n//       // Sort the ratios in descending order\n//       ratios.sort((a, b) => b.ratio - a.ratio);\n//       if (ratios[0].ratio === ratios[1].ratio) {\n//         // Randomly choose between the top two if there's a tie\n//         majorityType = Math.random() < 0.5 ? ratios[0].type : ratios[1].type;\n//       } else {\n//         // Choose the highest ratio as majorityType\n//         majorityType = ratios[0].type;\n//       }\n//     }\n//     const bouquetCondition = (completionRatio >= 0.75) ? 'Healthy' :\n//                              (completionRatio >= 0.25) ? 'Dying' : 'Dead';\n//     setBouquetInfo({ majorityType, bouquetCondition });\n//   };\n//   useEffect(() => {\n//     fetchCompletedTasks();\n//   }, []);\n//   const getBouquetImages = (type, bouquetStatus) => {\n//     if (type === 'Red') {\n//       if (bouquetStatus === 'Healthy') {\n//         return redHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return redDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return redDead;\n//       }\n//     } else if (type === 'White') {\n//       if (bouquetStatus === 'Healthy') {\n//         return whiteHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return whiteDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return whiteDead;\n//       }\n//     } else if (type === 'Yellow') {\n//       if (bouquetStatus === 'Healthy') {\n//         return yellowHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return yellowDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return yellowDead;\n//       }\n//     } else {\n//       if (bouquetStatus === 'Healthy') {\n//         return balancedHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return balancedDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return balancedDead;\n//       }\n//     }\n//   };\n//   return (\n//     <BouquetContainer>\n//       {bouquetInfo.majorityType && bouquetInfo.bouquetCondition && (\n//         <BouquetImage\n//           src={getBouquetImages(bouquetInfo.majorityType, bouquetInfo.bouquetCondition)}\n//           alt=\"Bouquet\"\n//         />\n//       )}\n//       <div>\n//         <h1>Bouquet</h1>\n//         <p>Type: {bouquetInfo.majorityType}</p>\n//         <p>Condition: {bouquetInfo.bouquetCondition}</p>\n//       </div>\n//       <Stack spacing={2} direction=\"row\" sx={{ marginLeft: '300px'}}>\n//         <Button variant=\"contained\" sx={{ backgroundColor: '#ffffff', color: '#a9a9a9'}} >花束を購入する</Button>\n//       </Stack>\n//     </BouquetContainer>\n//   );\n// };\n// const BouquetContainer = styled.div`\n//   width: 100vw;\n//   height: 100vh;\n//   background-image: url(${background});\n//   background-size: cover;\n//   background-position: center;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   flex-direction: column;\n// `;\n// const BouquetImage = styled.img`\n//   width: 150px;\n//   height: 150px;\n//   cursor: pointer;\n// `;\n// export default Bouquet;\nimport React,{useEffect,useState}from'react';import axios from'axios';import styled from'@emotion/styled';import background from'./bouquet.jpg';import redHealthy from'./bouquetflowers/Red/redbouquet1.PNG';import redDying from'./bouquetflowers/Red/redbouquet2.PNG';import redDead from'./bouquetflowers/Red/redbouquet3.PNG';import whiteHealthy from'./bouquetflowers/White/whitebouquet1.PNG';import whiteDying from'./bouquetflowers/White/whitebouquet2.PNG';import whiteDead from'./bouquetflowers/White/whitebouquet3.PNG';import yellowHealthy from'./bouquetflowers/Yellow/yellowbouquet1.PNG';import yellowDying from'./bouquetflowers/Yellow/yellowbouquet2.PNG';import yellowDead from'./bouquetflowers/Yellow/yellowbouquet3.PNG';import balancedHealthy from'./bouquetflowers/Balanced/balancebouquet1.PNG';import balancedDying from'./bouquetflowers/Balanced/balancebouquet3.PNG';import balancedDead from'./bouquetflowers/Balanced/balancebouquet4.PNG';import{Button,Stack}from'@mui/material';const Bouquet=()=>{const[bouquetInfo,setBouquetInfo]=useState({});const fetchCompletedTasks=async()=>{try{const token=localStorage.getItem('token');// Get the token from localStorage\nconst response=await axios.get('/api/v1/tasks/completed-this-week',{headers:{'Authorization':\"Bearer \".concat(token)}});if(response.data.length>0){calculateBouquet(response.data);}}catch(error){console.error('Error fetching completed tasks:',error);}};const calculateBouquet=tasks=>{let studyCount=0;let activityCount=0;let houseworkCount=0;let points=0;tasks.forEach(task=>{const condition=task.flowerStatus;console.log(\"Task ID: \".concat(task._id,\", Flower Status: \").concat(condition));if(condition==='healthy')points+=2;else if(condition==='dying')points+=1;else if(condition==='dead')points+=0;if(task.taskType==='study')studyCount++;else if(task.taskType==='activity')activityCount++;else if(task.taskType==='housework')houseworkCount++;});const totalTasks=tasks.length;console.log(\"Total tasks: \".concat(totalTasks));console.log(\"Points: \".concat(points));const completionRatio=points/(totalTasks*2);const studyRatio=studyCount/totalTasks;const houseworkRatio=houseworkCount/totalTasks;const activityRatio=activityCount/totalTasks;console.log(\"Completion Ratio: \".concat(completionRatio));console.log(\"Study Ratio: \".concat(studyRatio));console.log(\"Housework Ratio: \".concat(houseworkRatio));console.log(\"Activity Ratio: \".concat(activityRatio));let majorityType;// Check if ratios are balanced\nif(studyRatio>=0.25&&studyRatio<=0.45&&houseworkRatio>=0.25&&houseworkRatio<=0.45&&activityRatio>=0.25&&activityRatio<=0.45){majorityType='Balanced';}else{// Create an array of ratios with their corresponding types\nconst ratios=[{type:'Red',ratio:studyRatio},{type:'White',ratio:activityRatio},{type:'Yellow',ratio:houseworkRatio}];// Sort the ratios in descending order\nratios.sort((a,b)=>b.ratio-a.ratio);if(ratios[0].ratio===ratios[1].ratio){// Randomly choose between the top two if there's a tie\nmajorityType=Math.random()<0.5?ratios[0].type:ratios[1].type;}else{// Choose the highest ratio as majorityType\nmajorityType=ratios[0].type;}}const bouquetCondition=completionRatio>=0.75?'Healthy':completionRatio>=0.25?'Dying':'Dead';setBouquetInfo({majorityType,bouquetCondition});};useEffect(()=>{fetchCompletedTasks();},[]);const getBouquetImages=(type,bouquetStatus)=>{if(type==='Red'){if(bouquetStatus==='Healthy'){return redHealthy;}else if(bouquetStatus==='Dying'){return redDying;}else if(bouquetStatus==='Dead'){return redDead;}}else if(type==='White'){if(bouquetStatus==='Healthy'){return whiteHealthy;}else if(bouquetStatus==='Dying'){return whiteDying;}else if(bouquetStatus==='Dead'){return whiteDead;}}else if(type==='Yellow'){if(bouquetStatus==='Healthy'){return yellowHealthy;}else if(bouquetStatus==='Dying'){return yellowDying;}else if(bouquetStatus==='Dead'){return yellowDead;}}else{if(bouquetStatus==='Healthy'){return balancedHealthy;}else if(bouquetStatus==='Dying'){return balancedDying;}else if(bouquetStatus==='Dead'){return balancedDead;}}};return/*#__PURE__*/React.createElement(BouquetContainer,null,bouquetInfo.majorityType&&bouquetInfo.bouquetCondition&&/*#__PURE__*/React.createElement(BouquetImage,{src:getBouquetImages(bouquetInfo.majorityType,bouquetInfo.bouquetCondition),alt:\"Bouquet\"}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Bouquet\"),/*#__PURE__*/React.createElement(\"p\",null,\"Type: \",bouquetInfo.majorityType),/*#__PURE__*/React.createElement(\"p\",null,\"Condition: \",bouquetInfo.bouquetCondition)),/*#__PURE__*/React.createElement(Stack,{spacing:2,direction:\"row\",sx:{marginLeft:'300px'}},/*#__PURE__*/React.createElement(Button,{variant:\"contained\",sx:{backgroundColor:'#ffffff',color:'#a9a9a9'}},\"\\u82B1\\u675F\\u3092\\u8CFC\\u5165\\u3059\\u308B\")));};const BouquetContainer=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100vw;\\n  height: 100vh;\\n  background-image: url(\",\");\\n  background-size: cover;\\n  background-position: center;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  flex-direction: column;\\n\"])),background);const BouquetImage=styled.img(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 150px;\\n  height: 150px;\\n  cursor: pointer;\\n\"])));export default Bouquet;","map":{"version":3,"names":["React","useEffect","useState","axios","styled","background","redHealthy","redDying","redDead","whiteHealthy","whiteDying","whiteDead","yellowHealthy","yellowDying","yellowDead","balancedHealthy","balancedDying","balancedDead","Button","Stack","Bouquet","bouquetInfo","setBouquetInfo","fetchCompletedTasks","token","localStorage","getItem","response","get","headers","concat","data","length","calculateBouquet","error","console","tasks","studyCount","activityCount","houseworkCount","points","forEach","task","condition","flowerStatus","log","_id","taskType","totalTasks","completionRatio","studyRatio","houseworkRatio","activityRatio","majorityType","ratios","type","ratio","sort","a","b","Math","random","bouquetCondition","getBouquetImages","bouquetStatus","createElement","BouquetContainer","BouquetImage","src","alt","spacing","direction","sx","marginLeft","variant","backgroundColor","color","div","_templateObject","_taggedTemplateLiteral","img","_templateObject2"],"sources":["/Users/issey/hackathon/hackathonfinal/hackathon-front-main/frontend/src/Bouquet/Bouquet.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import styled from '@emotion/styled';\n// import background from './bouquet.jpg';\n// import redHealthy from './bouquetflowers/Red/redbouquet1.PNG';\n// import redDying from './bouquetflowers/Red/redbouquet2.PNG';\n// import redDead from './bouquetflowers/Red/redbouquet3.PNG';\n// import whiteHealthy from './bouquetflowers/White/whitebouquet1.PNG';\n// import whiteDying from './bouquetflowers/White/whitebouquet2.PNG';\n// import whiteDead from './bouquetflowers/White/whitebouquet3.PNG';\n// import yellowHealthy from './bouquetflowers/Yellow/yellowbouquet1.PNG';\n// import yellowDying from './bouquetflowers/Yellow/yellowbouquet2.PNG';\n// import yellowDead from './bouquetflowers/Yellow/yellowbouquet3.PNG';\n// import balancedHealthy from './bouquetflowers/Balanced/balancebouquet1.PNG';\n// import balancedDying from './bouquetflowers/Balanced/balancebouquet3.PNG';\n// import balancedDead from './bouquetflowers/Balanced/balancebouquet4.PNG';\n// import { Button, Stack } from '@mui/material'; // MUIのButtonとStackをインポート\n\n// const Bouquet = () => {\n//   const [bouquetInfo, setBouquetInfo] = useState({});\n\n//   const fetchCompletedTasks = async () => {\n//     try {\n//       const response = await axios.get('/api/v1/tasks/completed-this-week');\n//       if (response.data.length > 0){\n//         calculateBouquet(response.data);\n//       }\n//     } catch (error) {\n//       console.error('Error fetching completed tasks:', error);\n//     }\n//   };\n\n//   const calculateBouquet = (tasks) => {\n//     let studyCount = 0;\n//     let activityCount = 0;\n//     let houseworkCount = 0;\n//     let points = 0;\n\n//     tasks.forEach((task) => {\n//       const condition = task.flowerStatus;\n//       console.log(`Task ID: ${task._id}, Flower Status: ${condition}`);\n\n//       if (condition === 'healthy') points += 2;\n//       else if (condition === 'dying') points += 1;\n//       else if (condition === 'dead') points += 0;\n\n//       if (task.taskType === 'study') studyCount++;\n//       else if (task.taskType === 'activity') activityCount++;\n//       else if (task.taskType === 'housework') houseworkCount++;\n//     });\n\n//     const totalTasks = tasks.length;\n//     console.log(`Total tasks: ${totalTasks}`);\n//     console.log(`Points: ${points}`);\n\n//     const completionRatio = points / (totalTasks * 2);\n//     const studyRatio = studyCount / totalTasks;\n//     const houseworkRatio = houseworkCount / totalTasks;\n//     const activityRatio = activityCount / totalTasks;\n\n//     console.log(`Completion Ratio: ${completionRatio}`);\n//     console.log(`Study Ratio: ${studyRatio}`);\n//     console.log(`Housework Ratio: ${houseworkRatio}`);\n//     console.log(`Activity Ratio: ${activityRatio}`);\n\n//     let majorityType;\n\n//     // Check if ratios are balanced\n//     if (studyRatio >= 0.25 && studyRatio <= 0.45 &&\n//         houseworkRatio >= 0.25 && houseworkRatio <= 0.45 &&\n//         activityRatio >= 0.25 && activityRatio <= 0.45) {\n//       majorityType = 'Balanced';\n//     } else {\n//       // Create an array of ratios with their corresponding types\n//       const ratios = [\n//         { type: 'Red', ratio: studyRatio },\n//         { type: 'White', ratio: activityRatio },\n//         { type: 'Yellow', ratio: houseworkRatio }\n//       ];\n\n//       // Sort the ratios in descending order\n//       ratios.sort((a, b) => b.ratio - a.ratio);\n\n//       if (ratios[0].ratio === ratios[1].ratio) {\n//         // Randomly choose between the top two if there's a tie\n//         majorityType = Math.random() < 0.5 ? ratios[0].type : ratios[1].type;\n//       } else {\n//         // Choose the highest ratio as majorityType\n//         majorityType = ratios[0].type;\n//       }\n//     }\n\n//     const bouquetCondition = (completionRatio >= 0.75) ? 'Healthy' :\n//                              (completionRatio >= 0.25) ? 'Dying' : 'Dead';\n\n//     setBouquetInfo({ majorityType, bouquetCondition });\n//   };\n\n//   useEffect(() => {\n//     fetchCompletedTasks();\n//   }, []);\n\n//   const getBouquetImages = (type, bouquetStatus) => {\n//     if (type === 'Red') {\n//       if (bouquetStatus === 'Healthy') {\n//         return redHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return redDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return redDead;\n//       }\n//     } else if (type === 'White') {\n//       if (bouquetStatus === 'Healthy') {\n//         return whiteHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return whiteDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return whiteDead;\n//       }\n//     } else if (type === 'Yellow') {\n//       if (bouquetStatus === 'Healthy') {\n//         return yellowHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return yellowDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return yellowDead;\n//       }\n//     } else {\n//       if (bouquetStatus === 'Healthy') {\n//         return balancedHealthy;\n//       } else if (bouquetStatus === 'Dying') {\n//         return balancedDying;\n//       } else if (bouquetStatus === 'Dead') {\n//         return balancedDead;\n//       }\n//     }\n//   };\n\n//   return (\n//     <BouquetContainer>\n//       {bouquetInfo.majorityType && bouquetInfo.bouquetCondition && (\n//         <BouquetImage\n//           src={getBouquetImages(bouquetInfo.majorityType, bouquetInfo.bouquetCondition)}\n//           alt=\"Bouquet\"\n//         />\n//       )}\n//       <div>\n//         <h1>Bouquet</h1>\n//         <p>Type: {bouquetInfo.majorityType}</p>\n//         <p>Condition: {bouquetInfo.bouquetCondition}</p>\n//       </div>\n//       <Stack spacing={2} direction=\"row\" sx={{ marginLeft: '300px'}}>\n//         <Button variant=\"contained\" sx={{ backgroundColor: '#ffffff', color: '#a9a9a9'}} >花束を購入する</Button>\n//       </Stack>\n//     </BouquetContainer>\n//   );\n// };\n\n// const BouquetContainer = styled.div`\n//   width: 100vw;\n//   height: 100vh;\n//   background-image: url(${background});\n//   background-size: cover;\n//   background-position: center;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   flex-direction: column;\n// `;\n// const BouquetImage = styled.img`\n//   width: 150px;\n//   height: 150px;\n//   cursor: pointer;\n// `;\n\n// export default Bouquet;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled from '@emotion/styled';\nimport background from './bouquet.jpg';\nimport redHealthy from './bouquetflowers/Red/redbouquet1.PNG';\nimport redDying from './bouquetflowers/Red/redbouquet2.PNG';\nimport redDead from './bouquetflowers/Red/redbouquet3.PNG';\nimport whiteHealthy from './bouquetflowers/White/whitebouquet1.PNG';\nimport whiteDying from './bouquetflowers/White/whitebouquet2.PNG';\nimport whiteDead from './bouquetflowers/White/whitebouquet3.PNG';\nimport yellowHealthy from './bouquetflowers/Yellow/yellowbouquet1.PNG';\nimport yellowDying from './bouquetflowers/Yellow/yellowbouquet2.PNG';\nimport yellowDead from './bouquetflowers/Yellow/yellowbouquet3.PNG';\nimport balancedHealthy from './bouquetflowers/Balanced/balancebouquet1.PNG';\nimport balancedDying from './bouquetflowers/Balanced/balancebouquet3.PNG';\nimport balancedDead from './bouquetflowers/Balanced/balancebouquet4.PNG';\nimport { Button, Stack } from '@mui/material';\n\nconst Bouquet = () => {\n  const [bouquetInfo, setBouquetInfo] = useState({});\n\n  const fetchCompletedTasks = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Get the token from localStorage\n      const response = await axios.get('/api/v1/tasks/completed-this-week', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.data.length > 0) {\n        calculateBouquet(response.data);\n      }\n    } catch (error) {\n      console.error('Error fetching completed tasks:', error);\n    }\n  };\n\n  const calculateBouquet = (tasks) => {\n    let studyCount = 0;\n    let activityCount = 0;\n    let houseworkCount = 0;\n    let points = 0;\n\n    tasks.forEach((task) => {\n      const condition = task.flowerStatus;\n      console.log(`Task ID: ${task._id}, Flower Status: ${condition}`);\n\n      if (condition === 'healthy') points += 2;\n      else if (condition === 'dying') points += 1;\n      else if (condition === 'dead') points += 0;\n\n      if (task.taskType === 'study') studyCount++;\n      else if (task.taskType === 'activity') activityCount++;\n      else if (task.taskType === 'housework') houseworkCount++;\n    });\n\n    const totalTasks = tasks.length;\n    console.log(`Total tasks: ${totalTasks}`);\n    console.log(`Points: ${points}`);\n\n    const completionRatio = points / (totalTasks * 2);\n    const studyRatio = studyCount / totalTasks;\n    const houseworkRatio = houseworkCount / totalTasks;\n    const activityRatio = activityCount / totalTasks;\n\n    console.log(`Completion Ratio: ${completionRatio}`);\n    console.log(`Study Ratio: ${studyRatio}`);\n    console.log(`Housework Ratio: ${houseworkRatio}`);\n    console.log(`Activity Ratio: ${activityRatio}`);\n\n    let majorityType;\n\n    // Check if ratios are balanced\n    if (studyRatio >= 0.25 && studyRatio <= 0.45 &&\n        houseworkRatio >= 0.25 && houseworkRatio <= 0.45 &&\n        activityRatio >= 0.25 && activityRatio <= 0.45) {\n      majorityType = 'Balanced';\n    } else {\n      // Create an array of ratios with their corresponding types\n      const ratios = [\n        { type: 'Red', ratio: studyRatio },\n        { type: 'White', ratio: activityRatio },\n        { type: 'Yellow', ratio: houseworkRatio }\n      ];\n\n      // Sort the ratios in descending order\n      ratios.sort((a, b) => b.ratio - a.ratio);\n\n      if (ratios[0].ratio === ratios[1].ratio) {\n        // Randomly choose between the top two if there's a tie\n        majorityType = Math.random() < 0.5 ? ratios[0].type : ratios[1].type;\n      } else {\n        // Choose the highest ratio as majorityType\n        majorityType = ratios[0].type;\n      }\n    }\n\n    const bouquetCondition = (completionRatio >= 0.75) ? 'Healthy' :\n                             (completionRatio >= 0.25) ? 'Dying' : 'Dead';\n\n    setBouquetInfo({ majorityType, bouquetCondition });\n  };\n\n  useEffect(() => {\n    fetchCompletedTasks();\n  }, []);\n\n  const getBouquetImages = (type, bouquetStatus) => {\n    if (type === 'Red') {\n      if (bouquetStatus === 'Healthy') {\n        return redHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return redDying;\n      } else if (bouquetStatus === 'Dead') {\n        return redDead;\n      }\n    } else if (type === 'White') {\n      if (bouquetStatus === 'Healthy') {\n        return whiteHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return whiteDying;\n      } else if (bouquetStatus === 'Dead') {\n        return whiteDead;\n      }\n    } else if (type === 'Yellow') {\n      if (bouquetStatus === 'Healthy') {\n        return yellowHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return yellowDying;\n      } else if (bouquetStatus === 'Dead') {\n        return yellowDead;\n      }\n    } else {\n      if (bouquetStatus === 'Healthy') {\n        return balancedHealthy;\n      } else if (bouquetStatus === 'Dying') {\n        return balancedDying;\n      } else if (bouquetStatus === 'Dead') {\n        return balancedDead;\n      }\n    }\n  };\n\n  return (\n    <BouquetContainer>\n      {bouquetInfo.majorityType && bouquetInfo.bouquetCondition && (\n        <BouquetImage\n          src={getBouquetImages(bouquetInfo.majorityType, bouquetInfo.bouquetCondition)}\n          alt=\"Bouquet\"\n        />\n      )}\n      <div>\n        <h1>Bouquet</h1>\n        <p>Type: {bouquetInfo.majorityType}</p>\n        <p>Condition: {bouquetInfo.bouquetCondition}</p>\n      </div>\n      <Stack spacing={2} direction=\"row\" sx={{ marginLeft: '300px'}}>\n        <Button variant=\"contained\" sx={{ backgroundColor: '#ffffff', color: '#a9a9a9'}} >花束を購入する</Button>\n      </Stack>\n    </BouquetContainer>\n  );\n};\n\nconst BouquetContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: url(${background});\n  background-size: cover;\n  background-position: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\nconst BouquetImage = styled.img`\n  width: 150px;\n  height: 150px;\n  cursor: pointer;\n`;\n\nexport default Bouquet;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module"}