{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/issey/hackathon/hackathonfinal/hackathon-front-main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;// import React, { useState } from 'react';\n// import { Button } from '@mui/material';\n// import styled from '@emotion/styled';\n// import axios from 'axios';\n// import Tulip_Blooming from '../FlowersIMGFile/Tulip/Blooming.png';\n// import Tulip_Half_Blooming from '../FlowersIMGFile/Tulip/Half-blooming.png';\n// import Tulip_Withered from '../FlowersIMGFile/Tulip/Withered.png';\n// const TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n//   const [tooltipVisible, setTooltipVisible] = useState(false);\n//   const toggleTooltip = () => {\n//     setTooltipVisible(!tooltipVisible);\n//   };\n//   const deleteTask = async () => {\n//     try {\n//       await axios.delete(`/api/v1/task/${task._id}`);\n//       console.log('タスクを削除しました');\n//       refreshTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//       alert('タスクの削除に失敗しました');\n//     }\n//   };\n//   const markAsCompleted = async () => {\n//     try {\n//       const flowerStatus = checkFlowerCondition(task);\n//       await axios.put(`/api/v1/task/complete/${task._id}`, {\n//         flowerStatus,\n//         taskType: task.taskType,\n//         completedAt: new Date(),\n//         isCompleted: true,\n//       });\n//       console.log('タスクを完了しました');\n//       refreshTasks();\n//     } catch (error) {\n//       console.error('Error marking task as completed:', error);\n//       alert('タスクの完了に失敗しました');\n//     }\n//   };\n//   const getFlowerImage = (flowerStatus) => {\n//     if (flowerStatus === 'healthy') {\n//       return Tulip_Blooming;\n//     } else if (flowerStatus === 'dying') {\n//       return Tulip_Half_Blooming;\n//     } else {\n//       return Tulip_Withered;\n//     }\n//   };\n//   return (\n//     <FlowerWrapper>\n//       <FlowerImage\n//         index={index}\n//         src={getFlowerImage(checkFlowerCondition(task))}\n//         alt={task.flower}\n//         onClick={toggleTooltip}\n//       />\n//       {tooltipVisible && (\n//         <Tooltip>\n//           <p>タイトル：{task.title}</p>\n//           <p>内容：{task.description}</p>\n//           {/* <p>期限：{task.dueDate}</p> */}\n//           <p>期限：{new Date(task.dueDate).toLocaleString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })}</p>\n//           <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n//           <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n//         </Tooltip>\n//       )}\n//     </FlowerWrapper>\n//   );\n// };\n// const FlowerWrapper = styled.div`\n//   position: relative;\n//   display: inline-block;\n//   margin: 10px;\n// `;\n// const FlowerImage = styled.img`\n//   width: 150px;\n//   height: 150px;\n//   cursor: pointer;\n// `;\n// const Tooltip = styled.div`\n//   visibility: visible;\n//   width: 200px;\n//   background-color: black;\n//   color: #fff;\n//   text-align: center;\n//   border-radius: 6px;\n//   padding: 5px 0;\n//   position: absolute;\n//   z-index: 1;\n//   bottom: 125%;\n//   left: 50%;\n//   margin-left: -100px;\n//   opacity: 1;\n//   transition: opacity 0.3s;\n// `;\n// export default TaskFlower;\nimport React,{useState}from'react';import{Button}from'@mui/material';import styled from'@emotion/styled';import axios from'axios';import Tulip_Blooming from'../FlowersIMGFile/Tulip/Blooming.png';import Tulip_Half_Blooming from'../FlowersIMGFile/Tulip/Half-blooming.png';import Tulip_Withered from'../FlowersIMGFile/Tulip/Withered.png';const TaskFlower=_ref=>{let{task,index,checkFlowerCondition,refreshTasks}=_ref;const[tooltipVisible,setTooltipVisible]=useState(false);const toggleTooltip=()=>{setTooltipVisible(!tooltipVisible);};const deleteTask=async()=>{try{const token=localStorage.getItem('token');// Get the token from localStorage\nawait axios.delete(\"/api/v1/task/\".concat(task._id),{headers:{'Authorization':\"Bearer \".concat(token)}});console.log('タスクを削除しました');refreshTasks();}catch(error){console.error('Error deleting task:',error);alert('タスクの削除に失敗しました');}};const markAsCompleted=async()=>{try{const token=localStorage.getItem('token');// Get the token from localStorage\nconst flowerStatus=checkFlowerCondition(task);await axios.put(\"/api/v1/task/complete/\".concat(task._id),{flowerStatus,taskType:task.taskType,completedAt:new Date(),isCompleted:true},{headers:{'Authorization':\"Bearer \".concat(token)}});console.log('タスクを完了しました');refreshTasks();}catch(error){console.error('Error marking task as completed:',error);alert('タスクの完了に失敗しました');}};const getFlowerImage=flowerStatus=>{if(flowerStatus==='healthy'){return Tulip_Blooming;}else if(flowerStatus==='dying'){return Tulip_Half_Blooming;}else{return Tulip_Withered;}};return/*#__PURE__*/React.createElement(FlowerWrapper,null,/*#__PURE__*/React.createElement(FlowerImage,{index:index,src:getFlowerImage(checkFlowerCondition(task)),alt:task.flower,onClick:toggleTooltip}),tooltipVisible&&/*#__PURE__*/React.createElement(Tooltip,null,/*#__PURE__*/React.createElement(\"p\",null,\"\\u30BF\\u30A4\\u30C8\\u30EB\\uFF1A\",task.title),/*#__PURE__*/React.createElement(\"p\",null,\"\\u5185\\u5BB9\\uFF1A\",task.description),/*#__PURE__*/React.createElement(\"p\",null,\"\\u671F\\u9650\\uFF1A\",new Date(task.dueDate).toLocaleString('ja-JP',{year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit'})),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:markAsCompleted},\"\\u5B8C\\u4E86\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",onClick:deleteTask},\"\\u524A\\u9664\")));};const FlowerWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  position: relative;\\n  display: inline-block;\\n  margin: 10px;\\n\"])));const FlowerImage=styled.img(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 150px;\\n  height: 150px;\\n  cursor: pointer;\\n\"])));const Tooltip=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  visibility: visible;\\n  width: 200px;\\n  background-color: black;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 6px;\\n  padding: 5px 0;\\n  position: absolute;\\n  z-index: 1;\\n  bottom: 125%;\\n  left: 50%;\\n  margin-left: -100px;\\n  opacity: 1;\\n  transition: opacity 0.3s;\\n\"])));export default TaskFlower;","map":{"version":3,"names":["React","useState","Button","styled","axios","Tulip_Blooming","Tulip_Half_Blooming","Tulip_Withered","TaskFlower","_ref","task","index","checkFlowerCondition","refreshTasks","tooltipVisible","setTooltipVisible","toggleTooltip","deleteTask","token","localStorage","getItem","delete","concat","_id","headers","console","log","error","alert","markAsCompleted","flowerStatus","put","taskType","completedAt","Date","isCompleted","getFlowerImage","createElement","FlowerWrapper","FlowerImage","src","alt","flower","onClick","Tooltip","title","description","dueDate","toLocaleString","year","month","day","hour","minute","variant","color","div","_templateObject","_taggedTemplateLiteral","img","_templateObject2","_templateObject3"],"sources":["/Users/issey/hackathon/hackathonfinal/hackathon-front-main/frontend/src/Garden/TaskFlower/TaskFlower.js"],"sourcesContent":["\n// import React, { useState } from 'react';\n// import { Button } from '@mui/material';\n// import styled from '@emotion/styled';\n// import axios from 'axios';\n\n// import Tulip_Blooming from '../FlowersIMGFile/Tulip/Blooming.png';\n// import Tulip_Half_Blooming from '../FlowersIMGFile/Tulip/Half-blooming.png';\n// import Tulip_Withered from '../FlowersIMGFile/Tulip/Withered.png';\n\n// const TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n//   const [tooltipVisible, setTooltipVisible] = useState(false);\n\n//   const toggleTooltip = () => {\n//     setTooltipVisible(!tooltipVisible);\n//   };\n\n//   const deleteTask = async () => {\n//     try {\n//       await axios.delete(`/api/v1/task/${task._id}`);\n//       console.log('タスクを削除しました');\n//       refreshTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//       alert('タスクの削除に失敗しました');\n//     }\n//   };\n\n//   const markAsCompleted = async () => {\n//     try {\n//       const flowerStatus = checkFlowerCondition(task);\n//       await axios.put(`/api/v1/task/complete/${task._id}`, {\n//         flowerStatus,\n//         taskType: task.taskType,\n//         completedAt: new Date(),\n//         isCompleted: true,\n//       });\n//       console.log('タスクを完了しました');\n//       refreshTasks();\n//     } catch (error) {\n//       console.error('Error marking task as completed:', error);\n//       alert('タスクの完了に失敗しました');\n//     }\n//   };\n\n//   const getFlowerImage = (flowerStatus) => {\n//     if (flowerStatus === 'healthy') {\n//       return Tulip_Blooming;\n//     } else if (flowerStatus === 'dying') {\n//       return Tulip_Half_Blooming;\n//     } else {\n//       return Tulip_Withered;\n//     }\n//   };\n\n//   return (\n//     <FlowerWrapper>\n//       <FlowerImage\n//         index={index}\n//         src={getFlowerImage(checkFlowerCondition(task))}\n//         alt={task.flower}\n//         onClick={toggleTooltip}\n//       />\n//       {tooltipVisible && (\n//         <Tooltip>\n//           <p>タイトル：{task.title}</p>\n//           <p>内容：{task.description}</p>\n//           {/* <p>期限：{task.dueDate}</p> */}\n//           <p>期限：{new Date(task.dueDate).toLocaleString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })}</p>\n//           <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n//           <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n//         </Tooltip>\n//       )}\n//     </FlowerWrapper>\n//   );\n// };\n\n// const FlowerWrapper = styled.div`\n//   position: relative;\n//   display: inline-block;\n//   margin: 10px;\n// `;\n\n// const FlowerImage = styled.img`\n//   width: 150px;\n//   height: 150px;\n//   cursor: pointer;\n// `;\n\n// const Tooltip = styled.div`\n//   visibility: visible;\n//   width: 200px;\n//   background-color: black;\n//   color: #fff;\n//   text-align: center;\n//   border-radius: 6px;\n//   padding: 5px 0;\n//   position: absolute;\n//   z-index: 1;\n//   bottom: 125%;\n//   left: 50%;\n//   margin-left: -100px;\n//   opacity: 1;\n//   transition: opacity 0.3s;\n// `;\n\n// export default TaskFlower;\n\nimport React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\n\nimport Tulip_Blooming from '../FlowersIMGFile/Tulip/Blooming.png';\nimport Tulip_Half_Blooming from '../FlowersIMGFile/Tulip/Half-blooming.png';\nimport Tulip_Withered from '../FlowersIMGFile/Tulip/Withered.png';\n\nconst TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n\n  const toggleTooltip = () => {\n    setTooltipVisible(!tooltipVisible);\n  };\n\n  const deleteTask = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Get the token from localStorage\n      await axios.delete(`/api/v1/task/${task._id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('タスクを削除しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      alert('タスクの削除に失敗しました');\n    }\n  };\n\n  const markAsCompleted = async () => {\n    try {\n      const token = localStorage.getItem('token'); // Get the token from localStorage\n      const flowerStatus = checkFlowerCondition(task);\n      await axios.put(`/api/v1/task/complete/${task._id}`, {\n        flowerStatus,\n        taskType: task.taskType,\n        completedAt: new Date(),\n        isCompleted: true,\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('タスクを完了しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error marking task as completed:', error);\n      alert('タスクの完了に失敗しました');\n    }\n  };\n\n  const getFlowerImage = (flowerStatus) => {\n    if (flowerStatus === 'healthy') {\n      return Tulip_Blooming;\n    } else if (flowerStatus === 'dying') {\n      return Tulip_Half_Blooming;\n    } else {\n      return Tulip_Withered;\n    }\n  };\n\n  return (\n    <FlowerWrapper>\n      <FlowerImage\n        index={index}\n        src={getFlowerImage(checkFlowerCondition(task))}\n        alt={task.flower}\n        onClick={toggleTooltip}\n      />\n      {tooltipVisible && (\n        <Tooltip>\n          <p>タイトル：{task.title}</p>\n          <p>内容：{task.description}</p>\n          {/* <p>期限：{task.dueDate}</p> */}\n          <p>期限：{new Date(task.dueDate).toLocaleString('ja-JP', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' })}</p>\n          <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n        </Tooltip>\n      )}\n    </FlowerWrapper>\n  );\n};\n\nconst FlowerWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  margin: 10px;\n`;\n\nconst FlowerImage = styled.img`\n  width: 150px;\n  height: 150px;\n  cursor: pointer;\n`;\n\nconst Tooltip = styled.div`\n  visibility: visible;\n  width: 200px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -100px;\n  opacity: 1;\n  transition: opacity 0.3s;\n`;\n\nexport default TaskFlower;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}