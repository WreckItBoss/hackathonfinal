{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/issey/hackathon/hackathonfinal/hackathon-front-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;// // import React, { useState } from 'react';\n// // import { Button } from '@mui/material';\n// // import styled from '@emotion/styled';\n// // import axios from 'axios';\n// // const TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n// //   const [tooltipVisible, setTooltipVisible] = useState(false);\n// //   const toggleTooltip = () => {\n// //     setTooltipVisible(!tooltipVisible);\n// //   };\n// //   const deleteTask = async () => {\n// //     try {\n// //       await axios.delete(`/api/v1/task/${task._id}`);\n// //       console.log('タスクを削除しました');\n// //       refreshTasks(); // 修正: タスクをリフレッシュ\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //       alert('タスクの削除に失敗しました');\n// //     }\n// //   };\n// //   return (\n// //     <FlowerWrapper>\n// //       <FlowerImage\n// //         index={index}\n// //         src={checkFlowerCondition(task)} // 修正: タスクの状態をチェックして画像を取得\n// //         alt={task.flower}\n// //         onClick={toggleTooltip} // 修正: マウスオーバーでツールチップを表示\n// //         //onMouseLeave={toggleTooltip} // 修正: マウスアウトでツールチップを非表示\n// //       />\n// //       {tooltipVisible && (\n// //         <Tooltip>\n// //           <p>タイトル：{task.title}</p>\n// //           <p>内容：{task.description}</p>\n// //           <p>期限：{task.dueDate}</p>\n// //           <Button variant=\"contained\" color=\"primary\" onClick={deleteTask}>削除</Button>\n// //         </Tooltip>\n// //       )}\n// //     </FlowerWrapper>\n// //   );\n// // };\n// // const FlowerWrapper = styled.div`\n// //   position: relative;\n// //   display: inline-block;\n// //   margin: 10px;\n// // `;\n// // const FlowerImage = styled.img`\n// //   width: 150px;\n// //   height: 150px;\n// //   cursor: pointer;\n// // `;\n// // const Tooltip = styled.div`\n// //   visibility: visible;\n// //   width: 200px;\n// //   background-color: black;\n// //   color: #fff;\n// //   text-align: center;\n// //   border-radius: 6px;\n// //   padding: 5px 0;\n// //   position: absolute;\n// //   z-index: 1;\n// //   bottom: 125%; /* 画像の上にツールチップを配置 */\n// //   left: 50%;\n// //   margin-left: -100px;\n// //   opacity: 1;\n// //   transition: opacity 0.3s;\n// // `;\n// // export default TaskFlower;\n// import React, { useState } from 'react';\n// import { Button } from '@mui/material';\n// import styled from '@emotion/styled';\n// import axios from 'axios';\n// const TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n//   const [tooltipVisible, setTooltipVisible] = useState(false);\n//   const toggleTooltip = () => {\n//     setTooltipVisible(!tooltipVisible);\n//   };\n//   const deleteTask = async () => {\n//     try {\n//       await axios.delete(`/api/v1/task/${task._id}`);\n//       console.log('タスクを削除しました');\n//       refreshTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//       alert('タスクの削除に失敗しました');\n//     }\n//   };\n//   const markAsCompleted = async () => {\n//     try {\n//       await axios.put(`/api/v1/task/${task._id}`, { completedAt: new Date() });\n//       console.log('タスクを完了しました');\n//       refreshTasks(); // Refresh tasks after marking as complete\n//     } catch (error) {\n//       console.error('Error marking task as completed:', error);\n//       alert('タスクの完了に失敗しました');\n//     }\n//   };\n//   return (\n//     <FlowerWrapper>\n//       <FlowerImage\n//         index={index}\n//         src={checkFlowerCondition(task)}\n//         alt={task.flower}\n//         onClick={toggleTooltip}\n//       />\n//       {tooltipVisible && (\n//         <Tooltip>\n//           <p>タイトル：{task.title}</p>\n//           <p>内容：{task.description}</p>\n//           <p>期限：{task.dueDate}</p>\n//           <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n//           <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n//         </Tooltip>\n//       )}\n//     </FlowerWrapper>\n//   );\n// };\n// const FlowerWrapper = styled.div`\n//   position: relative;\n//   display: inline-block;\n//   margin: 10px;\n// `;\n// const FlowerImage = styled.img`\n//   width: 150px;\n//   height: 150px;\n//   cursor: pointer;\n// `;\n// const Tooltip = styled.div`\n//   visibility: visible;\n//   width: 200px;\n//   background-color: black;\n//   color: #fff;\n//   text-align: center;\n//   border-radius: 6px;\n//   padding: 5px 0;\n//   position: absolute;\n//   z-index: 1;\n//   bottom: 125%;\n//   left: 50%;\n//   margin-left: -100px;\n//   opacity: 1;\n//   transition: opacity 0.3s;\n// `;\n// export default TaskFlower;\nimport React,{useState}from'react';import{Button}from'@mui/material';import styled from'@emotion/styled';import axios from'axios';const TaskFlower=_ref=>{let{task,index,checkFlowerCondition,refreshTasks}=_ref;const[tooltipVisible,setTooltipVisible]=useState(false);const toggleTooltip=()=>{setTooltipVisible(!tooltipVisible);};const deleteTask=async()=>{try{await axios.delete(\"/api/v1/task/\".concat(task._id));console.log('タスクを削除しました');refreshTasks();}catch(error){console.error('Error deleting task:',error);alert('タスクの削除に失敗しました');}};const markAsCompleted=async()=>{try{const flowerStatus=checkFlowerCondition(task);await axios.put(\"/api/v1/task/\".concat(task._id),{completedAt:new Date(),flowerStatus,taskType:task.taskType});console.log('タスクを完了しました');refreshTasks();}catch(error){console.error('Error marking task as completed:',error);alert('タスクの完了に失敗しました');}};return/*#__PURE__*/React.createElement(FlowerWrapper,null,/*#__PURE__*/React.createElement(FlowerImage,{index:index,src:checkFlowerCondition(task),alt:task.flower,onClick:toggleTooltip}),tooltipVisible&&/*#__PURE__*/React.createElement(Tooltip,null,/*#__PURE__*/React.createElement(\"p\",null,\"\\u30BF\\u30A4\\u30C8\\u30EB\\uFF1A\",task.title),/*#__PURE__*/React.createElement(\"p\",null,\"\\u5185\\u5BB9\\uFF1A\",task.description),/*#__PURE__*/React.createElement(\"p\",null,\"\\u671F\\u9650\\uFF1A\",task.dueDate),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:markAsCompleted},\"\\u5B8C\\u4E86\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",onClick:deleteTask},\"\\u524A\\u9664\")));};const FlowerWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  position: relative;\\n  display: inline-block;\\n  margin: 10px;\\n\"])));const FlowerImage=styled.img(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 150px;\\n  height: 150px;\\n  cursor: pointer;\\n\"])));const Tooltip=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  visibility: visible;\\n  width: 200px;\\n  background-color: black;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 6px;\\n  padding: 5px 0;\\n  position: absolute;\\n  z-index: 1;\\n  bottom: 125%;\\n  left: 50%;\\n  margin-left: -100px;\\n  opacity: 1;\\n  transition: opacity 0.3s;\\n\"])));export default TaskFlower;","map":{"version":3,"names":["React","useState","Button","styled","axios","TaskFlower","_ref","task","index","checkFlowerCondition","refreshTasks","tooltipVisible","setTooltipVisible","toggleTooltip","deleteTask","delete","concat","_id","console","log","error","alert","markAsCompleted","flowerStatus","put","completedAt","Date","taskType","createElement","FlowerWrapper","FlowerImage","src","alt","flower","onClick","Tooltip","title","description","dueDate","variant","color","div","_templateObject","_taggedTemplateLiteral","img","_templateObject2","_templateObject3"],"sources":["/Users/issey/hackathon/hackathonfinal/hackathon-front-main/src/Garden/TaskFlower/TaskFlower.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import { Button } from '@mui/material';\n// // import styled from '@emotion/styled';\n// // import axios from 'axios';\n\n// // const TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n// //   const [tooltipVisible, setTooltipVisible] = useState(false);\n\n// //   const toggleTooltip = () => {\n// //     setTooltipVisible(!tooltipVisible);\n// //   };\n\n// //   const deleteTask = async () => {\n// //     try {\n// //       await axios.delete(`/api/v1/task/${task._id}`);\n// //       console.log('タスクを削除しました');\n// //       refreshTasks(); // 修正: タスクをリフレッシュ\n// //     } catch (error) {\n// //       console.error('Error deleting task:', error);\n// //       alert('タスクの削除に失敗しました');\n// //     }\n// //   };\n  \n// //   return (\n// //     <FlowerWrapper>\n// //       <FlowerImage\n// //         index={index}\n// //         src={checkFlowerCondition(task)} // 修正: タスクの状態をチェックして画像を取得\n// //         alt={task.flower}\n// //         onClick={toggleTooltip} // 修正: マウスオーバーでツールチップを表示\n// //         //onMouseLeave={toggleTooltip} // 修正: マウスアウトでツールチップを非表示\n// //       />\n// //       {tooltipVisible && (\n// //         <Tooltip>\n// //           <p>タイトル：{task.title}</p>\n// //           <p>内容：{task.description}</p>\n// //           <p>期限：{task.dueDate}</p>\n// //           <Button variant=\"contained\" color=\"primary\" onClick={deleteTask}>削除</Button>\n// //         </Tooltip>\n// //       )}\n// //     </FlowerWrapper>\n// //   );\n// // };\n\n// // const FlowerWrapper = styled.div`\n// //   position: relative;\n// //   display: inline-block;\n// //   margin: 10px;\n// // `;\n\n// // const FlowerImage = styled.img`\n// //   width: 150px;\n// //   height: 150px;\n// //   cursor: pointer;\n// // `;\n\n// // const Tooltip = styled.div`\n// //   visibility: visible;\n// //   width: 200px;\n// //   background-color: black;\n// //   color: #fff;\n// //   text-align: center;\n// //   border-radius: 6px;\n// //   padding: 5px 0;\n// //   position: absolute;\n// //   z-index: 1;\n// //   bottom: 125%; /* 画像の上にツールチップを配置 */\n// //   left: 50%;\n// //   margin-left: -100px;\n// //   opacity: 1;\n// //   transition: opacity 0.3s;\n// // `;\n\n// // export default TaskFlower;\n\n// import React, { useState } from 'react';\n// import { Button } from '@mui/material';\n// import styled from '@emotion/styled';\n// import axios from 'axios';\n\n// const TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n//   const [tooltipVisible, setTooltipVisible] = useState(false);\n\n//   const toggleTooltip = () => {\n//     setTooltipVisible(!tooltipVisible);\n//   };\n\n//   const deleteTask = async () => {\n//     try {\n//       await axios.delete(`/api/v1/task/${task._id}`);\n//       console.log('タスクを削除しました');\n//       refreshTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//       alert('タスクの削除に失敗しました');\n//     }\n//   };\n\n//   const markAsCompleted = async () => {\n//     try {\n//       await axios.put(`/api/v1/task/${task._id}`, { completedAt: new Date() });\n//       console.log('タスクを完了しました');\n//       refreshTasks(); // Refresh tasks after marking as complete\n//     } catch (error) {\n//       console.error('Error marking task as completed:', error);\n//       alert('タスクの完了に失敗しました');\n//     }\n//   };\n\n//   return (\n//     <FlowerWrapper>\n//       <FlowerImage\n//         index={index}\n//         src={checkFlowerCondition(task)}\n//         alt={task.flower}\n//         onClick={toggleTooltip}\n//       />\n//       {tooltipVisible && (\n//         <Tooltip>\n//           <p>タイトル：{task.title}</p>\n//           <p>内容：{task.description}</p>\n//           <p>期限：{task.dueDate}</p>\n//           <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n//           <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n//         </Tooltip>\n//       )}\n//     </FlowerWrapper>\n//   );\n// };\n\n// const FlowerWrapper = styled.div`\n//   position: relative;\n//   display: inline-block;\n//   margin: 10px;\n// `;\n\n// const FlowerImage = styled.img`\n//   width: 150px;\n//   height: 150px;\n//   cursor: pointer;\n// `;\n\n// const Tooltip = styled.div`\n//   visibility: visible;\n//   width: 200px;\n//   background-color: black;\n//   color: #fff;\n//   text-align: center;\n//   border-radius: 6px;\n//   padding: 5px 0;\n//   position: absolute;\n//   z-index: 1;\n//   bottom: 125%;\n//   left: 50%;\n//   margin-left: -100px;\n//   opacity: 1;\n//   transition: opacity 0.3s;\n// `;\n\n// export default TaskFlower;\n\nimport React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\n\nconst TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n\n  const toggleTooltip = () => {\n    setTooltipVisible(!tooltipVisible);\n  };\n\n  const deleteTask = async () => {\n    try {\n      await axios.delete(`/api/v1/task/${task._id}`);\n      console.log('タスクを削除しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      alert('タスクの削除に失敗しました');\n    }\n  };\n\n  const markAsCompleted = async () => {\n    try {\n      const flowerStatus = checkFlowerCondition(task);\n      await axios.put(`/api/v1/task/${task._id}`, {\n        completedAt: new Date(),\n        flowerStatus,\n        taskType: task.taskType,\n      });\n      console.log('タスクを完了しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error marking task as completed:', error);\n      alert('タスクの完了に失敗しました');\n    }\n  };\n\n  return (\n    <FlowerWrapper>\n      <FlowerImage\n        index={index}\n        src={checkFlowerCondition(task)}\n        alt={task.flower}\n        onClick={toggleTooltip}\n      />\n      {tooltipVisible && (\n        <Tooltip>\n          <p>タイトル：{task.title}</p>\n          <p>内容：{task.description}</p>\n          <p>期限：{task.dueDate}</p>\n          <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n        </Tooltip>\n      )}\n    </FlowerWrapper>\n  );\n};\n\nconst FlowerWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  margin: 10px;\n`;\n\nconst FlowerImage = styled.img`\n  width: 150px;\n  height: 150px;\n  cursor: pointer;\n`;\n\nconst Tooltip = styled.div`\n  visibility: visible;\n  width: 200px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -100px;\n  opacity: 1;\n  transition: opacity 0.3s;\n`;\n\nexport default TaskFlower;\n"],"mappings":"uPAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,MAAM,KAAQ,eAAe,CACtC,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,UAAU,CAAGC,IAAA,EAAyD,IAAxD,CAAEC,IAAI,CAAEC,KAAK,CAAEC,oBAAoB,CAAEC,YAAa,CAAC,CAAAJ,IAAA,CACrE,KAAM,CAACK,cAAc,CAAEC,iBAAiB,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAE3D,KAAM,CAAAY,aAAa,CAAGA,CAAA,GAAM,CAC1BD,iBAAiB,CAAC,CAACD,cAAc,CAAC,CACpC,CAAC,CAED,KAAM,CAAAG,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CACF,KAAM,CAAAV,KAAK,CAACW,MAAM,iBAAAC,MAAA,CAAiBT,IAAI,CAACU,GAAG,CAAE,CAAC,CAC9CC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CACzBT,YAAY,CAAC,CAAC,CAChB,CAAE,MAAOU,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5CC,KAAK,CAAC,eAAe,CAAC,CACxB,CACF,CAAC,CAED,KAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAAC,YAAY,CAAGd,oBAAoB,CAACF,IAAI,CAAC,CAC/C,KAAM,CAAAH,KAAK,CAACoB,GAAG,iBAAAR,MAAA,CAAiBT,IAAI,CAACU,GAAG,EAAI,CAC1CQ,WAAW,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CACvBH,YAAY,CACZI,QAAQ,CAAEpB,IAAI,CAACoB,QACjB,CAAC,CAAC,CACFT,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CACzBT,YAAY,CAAC,CAAC,CAChB,CAAE,MAAOU,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxDC,KAAK,CAAC,eAAe,CAAC,CACxB,CACF,CAAC,CAED,mBACErB,KAAA,CAAA4B,aAAA,CAACC,aAAa,mBACZ7B,KAAA,CAAA4B,aAAA,CAACE,WAAW,EACVtB,KAAK,CAAEA,KAAM,CACbuB,GAAG,CAAEtB,oBAAoB,CAACF,IAAI,CAAE,CAChCyB,GAAG,CAAEzB,IAAI,CAAC0B,MAAO,CACjBC,OAAO,CAAErB,aAAc,CACxB,CAAC,CACDF,cAAc,eACbX,KAAA,CAAA4B,aAAA,CAACO,OAAO,mBACNnC,KAAA,CAAA4B,aAAA,UAAG,gCAAK,CAACrB,IAAI,CAAC6B,KAAS,CAAC,cACxBpC,KAAA,CAAA4B,aAAA,UAAG,oBAAG,CAACrB,IAAI,CAAC8B,WAAe,CAAC,cAC5BrC,KAAA,CAAA4B,aAAA,UAAG,oBAAG,CAACrB,IAAI,CAAC+B,OAAW,CAAC,cACxBtC,KAAA,CAAA4B,aAAA,CAAC1B,MAAM,EAACqC,OAAO,CAAC,WAAW,CAACC,KAAK,CAAC,SAAS,CAACN,OAAO,CAAEZ,eAAgB,EAAC,cAAU,CAAC,cACjFtB,KAAA,CAAA4B,aAAA,CAAC1B,MAAM,EAACqC,OAAO,CAAC,WAAW,CAACC,KAAK,CAAC,WAAW,CAACN,OAAO,CAAEpB,UAAW,EAAC,cAAU,CACtE,CAEE,CAAC,CAEpB,CAAC,CAED,KAAM,CAAAe,aAAa,CAAG1B,MAAM,CAACsC,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,4EAI/B,CAED,KAAM,CAAAb,WAAW,CAAG3B,MAAM,CAACyC,GAAG,CAAAC,gBAAA,GAAAA,gBAAA,CAAAF,sBAAA,iEAI7B,CAED,KAAM,CAAAR,OAAO,CAAGhC,MAAM,CAACsC,GAAG,CAAAK,gBAAA,GAAAA,gBAAA,CAAAH,sBAAA,ySAezB,CAED,cAAe,CAAAtC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}