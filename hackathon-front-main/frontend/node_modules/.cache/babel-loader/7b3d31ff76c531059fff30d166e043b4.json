{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/akamurasaki/hackathonfinal/hackathon-front-main/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React,{useState}from'react';import{Button}from'@mui/material';import styled from'@emotion/styled';import axios from'axios';import tulip_healthy from'../FlowersIMGFile/Tulip/tulip_alive.png';import tulip_dying from'../FlowersIMGFile/Tulip/tulip_dying.png';import tulip_dead from'../FlowersIMGFile/Tulip/tulip_dead.png';import poppy_healthy from'../FlowersIMGFile/Tulip/poppy_alive.png';import poppy_dying from'../FlowersIMGFile/Tulip/poppy_dying.png';import poppy_dead from'../FlowersIMGFile/Tulip/poppy_dead.png';import lily_healthy from'../FlowersIMGFile/Tulip/lily_alive.png';import lily_dying from'../FlowersIMGFile/Tulip/lily_dying.png';import lily_dead from'../FlowersIMGFile/Tulip/lily_dead.png';const TaskFlower=_ref=>{let{task,index,checkFlowerCondition,refreshTasks}=_ref;const[tooltipVisible,setTooltipVisible]=useState(false);const toggleTooltip=()=>{setTooltipVisible(!tooltipVisible);};const deleteTask=async()=>{try{await axios.delete(\"/api/v1/task/\".concat(task._id));console.log('タスクを削除しました');refreshTasks();}catch(error){console.error('Error deleting task:',error);alert('タスクの削除に失敗しました');}};const markAsCompleted=async()=>{try{const flowerStatus=checkFlowerCondition(task);await axios.put(\"/api/v1/task/complete/\".concat(task._id),{flowerStatus,taskType:task.taskType,completedAt:new Date(),isCompleted:true});console.log('タスクを完了しました');refreshTasks();}catch(error){console.error('Error marking task as completed:',error);alert('タスクの完了に失敗しました');}};const getFlowerImage=(flowerStatus,taskType)=>{if(taskType==='study'){if(flowerStatus==='healthy'){return tulip_healthy;}else if(flowerStatus==='dying'){return tulip_dying;}else{return tulip_dead;}}else if(taskType==='housework'){if(flowerStatus==='healthy'){return poppy_healthy;}else if(flowerStatus==='dying'){return poppy_dying;}else{return poppy_dead;}}else if(taskType==='activity'){if(flowerStatus==='healthy'){return lily_healthy;}else if(flowerStatus==='dying'){return lily_dying;}else{console.log(lily_dead);return lily_dead;}}};return/*#__PURE__*/React.createElement(FlowerWrapper,null,/*#__PURE__*/React.createElement(FlowerImage,{index:index,src:getFlowerImage(checkFlowerCondition(task),task.taskType),alt:task.flower,onClick:toggleTooltip}),tooltipVisible&&/*#__PURE__*/React.createElement(Tooltip,null,/*#__PURE__*/React.createElement(\"p\",null,\"\\u30BF\\u30A4\\u30C8\\u30EB\\uFF1A\",task.title),/*#__PURE__*/React.createElement(\"p\",null,\"\\u5185\\u5BB9\\uFF1A\",task.description),/*#__PURE__*/React.createElement(\"p\",null,\"\\u671F\\u9650\\uFF1A\",task.dueDate),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"primary\",onClick:markAsCompleted},\"\\u5B8C\\u4E86\"),/*#__PURE__*/React.createElement(Button,{variant:\"contained\",color:\"secondary\",onClick:deleteTask},\"\\u524A\\u9664\")));};const FlowerWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  position: relative;\\n  display: inline-block;\\n  margin: 10px;\\n\"])));const FlowerImage=styled.img(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  width: 150px;\\n  height: 150px;\\n  cursor: pointer;\\n\"])));const Tooltip=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  visibility: visible;\\n  width: 200px;\\n  background-color: white;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 6px;\\n  padding: 5px 0;\\n  position: absolute;\\n  z-index: 1;\\n  bottom: 125%;\\n  left: 50%;\\n  margin-left: -100px;\\n  opacity: 1;\\n  transition: opacity 0.3s;\\n\"])));export default TaskFlower;","map":{"version":3,"names":["React","useState","Button","styled","axios","tulip_healthy","tulip_dying","tulip_dead","poppy_healthy","poppy_dying","poppy_dead","lily_healthy","lily_dying","lily_dead","TaskFlower","_ref","task","index","checkFlowerCondition","refreshTasks","tooltipVisible","setTooltipVisible","toggleTooltip","deleteTask","delete","concat","_id","console","log","error","alert","markAsCompleted","flowerStatus","put","taskType","completedAt","Date","isCompleted","getFlowerImage","createElement","FlowerWrapper","FlowerImage","src","alt","flower","onClick","Tooltip","title","description","dueDate","variant","color","div","_templateObject","_taggedTemplateLiteral","img","_templateObject2","_templateObject3"],"sources":["/Users/akamurasaki/hackathonfinal/hackathon-front-main/frontend/src/Garden/TaskFlower/TaskFlower.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button } from '@mui/material';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\n\nimport tulip_healthy from '../FlowersIMGFile/Tulip/tulip_alive.png';\nimport tulip_dying from '../FlowersIMGFile/Tulip/tulip_dying.png';\nimport tulip_dead from '../FlowersIMGFile/Tulip/tulip_dead.png';\nimport poppy_healthy from '../FlowersIMGFile/Tulip/poppy_alive.png';\nimport poppy_dying from '../FlowersIMGFile/Tulip/poppy_dying.png';\nimport poppy_dead from '../FlowersIMGFile/Tulip/poppy_dead.png';\nimport lily_healthy from '../FlowersIMGFile/Tulip/lily_alive.png';\nimport lily_dying from '../FlowersIMGFile/Tulip/lily_dying.png';\nimport lily_dead from '../FlowersIMGFile/Tulip/lily_dead.png';\n\nconst TaskFlower = ({ task, index, checkFlowerCondition, refreshTasks }) => {\n  const [tooltipVisible, setTooltipVisible] = useState(false);\n\n  const toggleTooltip = () => {\n    setTooltipVisible(!tooltipVisible);\n  };\n\n  const deleteTask = async () => {\n    try {\n      await axios.delete(`/api/v1/task/${task._id}`);\n      console.log('タスクを削除しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      alert('タスクの削除に失敗しました');\n    }\n  };\n\n  const markAsCompleted = async () => {\n    try {\n      const flowerStatus = checkFlowerCondition(task);\n      await axios.put(`/api/v1/task/complete/${task._id}`, {\n        flowerStatus,\n        taskType: task.taskType,\n        completedAt: new Date(),\n        isCompleted: true,\n      });\n      console.log('タスクを完了しました');\n      refreshTasks();\n    } catch (error) {\n      console.error('Error marking task as completed:', error);\n      alert('タスクの完了に失敗しました');\n    }\n  };\n\n  const getFlowerImage = (flowerStatus, taskType) => {\n    if (taskType === 'study') {\n      if (flowerStatus === 'healthy') {\n        return tulip_healthy;\n      } else if (flowerStatus === 'dying') {\n        return tulip_dying;\n      } else {\n        return tulip_dead;\n      }\n    } else if (taskType === 'housework') {\n      if (flowerStatus === 'healthy') {\n        return poppy_healthy;\n      } else if (flowerStatus === 'dying') {\n        return poppy_dying;\n      } else {\n        return poppy_dead;\n      }\n    } else if (taskType === 'activity') {\n      if (flowerStatus === 'healthy') {\n        return lily_healthy;\n      } else if (flowerStatus === 'dying') {\n        return lily_dying;\n      } else {\n        console.log(lily_dead)\n        return lily_dead;\n        \n      }\n    }\n  };\n\n  return (\n    <FlowerWrapper>\n      <FlowerImage\n        index={index}\n        src={getFlowerImage(checkFlowerCondition(task), task.taskType)}\n        alt={task.flower}\n        onClick={toggleTooltip}\n      />\n      {tooltipVisible && (\n        <Tooltip>\n          <p>タイトル：{task.title}</p>\n          <p>内容：{task.description}</p>\n          <p>期限：{task.dueDate}</p>\n          <Button variant=\"contained\" color=\"primary\" onClick={markAsCompleted}>完了</Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={deleteTask}>削除</Button>\n        </Tooltip>\n      )}\n    </FlowerWrapper>\n  );\n};\n\nconst FlowerWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  margin: 10px;\n`;\n\nconst FlowerImage = styled.img`\n  width: 150px;\n  height: 150px;\n  cursor: pointer;\n`;\n\nconst Tooltip = styled.div`\n  visibility: visible;\n  width: 200px;\n  background-color: white;\n  color: #fff;\n  text-align: center;\n  border-radius: 6px;\n  padding: 5px 0;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  margin-left: -100px;\n  opacity: 1;\n  transition: opacity 0.3s;\n`;\n\nexport default TaskFlower;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}